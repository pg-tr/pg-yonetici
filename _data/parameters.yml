allow_system_table_mods:
    type: bool
    short: "Allows modifications of the structure of system tables."
    description: "<p>Allows modification of the structure of system tables as well as certain other risky actions on system tables. This is otherwise not allowed even for superusers. Ill-advised use of this setting can cause irretrievable data loss or seriously corrupt the database system. Only superusers can change this setting.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

application_name:
    type: string
    short: "Sets the application name to be reported in statistics and logs."
    description: "<p>The <code class=\"varname\">application_name</code> can be any string of less than <code class=\"symbol\">NAMEDATALEN</code> characters (64 characters in a standard build). It is typically set by an application upon connection to the server. The name will be displayed in the <span class=\"structname\">pg_stat_activity</span> view and included in CSV log entries. It can also be included in regular log entries via the <code class=\"varname\">log_line_prefix</code> parameter. Only printable ASCII characters may be used in the <code class=\"varname\">application_name</code> value. Other characters will be replaced with question marks (<code class=\"literal\">?</code>).</p>"
    context: user

archive_cleanup_command:
    type: string
    short: "Sets the shell command that will be executed at every restart point."
    description: "<p>This optional parameter specifies a shell command that will be executed at every restartpoint. The purpose of <code class=\"varname\">archive_cleanup_command</code> is to provide a mechanism for cleaning up old archived WAL files that are no longer needed by the standby server. Any <code class=\"literal\">%r</code> is replaced by the name of the file containing the last valid restart point. That is the earliest file that must be <span class=\"emphasis\">kept</span> to allow a restore to be restartable, and so all files earlier than <code class=\"literal\">%r</code> may be safely removed. This information can be used to truncate the archive to just the minimum required to support restart from the current restore. The <span class=\"xref\">pgarchivecleanup</span> module is often used in <code class=\"varname\">archive_cleanup_command</code> for single-standby configurations, for example:<span class=\"programlisting\">archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'</span> Note however that if multiple standby servers are restoring from the same archive directory, you will need to ensure that you do not delete WAL files until they are no longer needed by any of the servers. <code class=\"varname\">archive_cleanup_command</code> would typically be used in a warm-standby configuration (see <span class=\"xref\">warm-standby</span>). Write <code class=\"literal\">%%</code> to embed an actual <code class=\"literal\">%</code> character in the command.</p><p>If the command returns a nonzero exit status then a warning log message will be written. An exception is that if the command was terminated by a signal or an error by the shell (such as command not found), a fatal error will be raised.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

archive_command:
    type: string
    short: "Sets the shell command that will be called to archive a WAL file."
    description: "<p>The local shell command to execute to archive a completed WAL file segment. Any <code class=\"literal\">%p</code> in the string is replaced by the path name of the file to archive, and any <code class=\"literal\">%f</code> is replaced by only the file name. (The path name is relative to the working directory of the server, i.e., the cluster's data directory.) Use <code class=\"literal\">%%</code> to embed an actual <code class=\"literal\">%</code> character in the command. It is important for the command to return a zero exit status only if it succeeds. For more information see <span class=\"xref\">backup-archiving-wal</span>.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. It is ignored unless <code class=\"varname\">archive_mode</code> was enabled at server start. If <code class=\"varname\">archive_command</code> is an empty string (the default) while <code class=\"varname\">archive_mode</code> is enabled, WAL archiving is temporarily disabled, but the server continues to accumulate WAL segment files in the expectation that a command will soon be provided. Setting <code class=\"varname\">archive_command</code> to a command that does nothing but return true, e.g., <code class=\"literal\">/bin/true</code> (<code class=\"literal\">REM</code> on Windows), effectively disables archiving, but also breaks the chain of WAL files needed for archive recovery, so it should only be used in unusual circumstances.</p>"
    context: sighup

archive_mode:
    type: enum
    short: "Allows archiving of WAL files using archive_command."
    description: "<p>When <code class=\"varname\">archive_mode</code> is enabled, completed WAL segments are sent to archive storage by setting <code class=\"varname\">archive_command</code>. In addition to <code class=\"literal\">off</code>, to disable, there are two modes: <code class=\"literal\">on</code>, and <code class=\"literal\">always</code>. During normal operation, there is no difference between the two modes, but when set to <code class=\"literal\">always</code> the WAL archiver is enabled also during archive recovery or standby mode. In <code class=\"literal\">always</code> mode, all files restored from the archive or streamed with streaming replication will be archived (again). See <span class=\"xref\">continuous-archiving-in-standby</span> for details.</p><p><code class=\"varname\">archive_mode</code> and <code class=\"varname\">archive_command</code> are separate variables so that <code class=\"varname\">archive_command</code> can be changed without leaving archiving mode. This parameter can only be set at server start. <code class=\"varname\">archive_mode</code> cannot be enabled when <code class=\"varname\">wal_level</code> is set to <code class=\"literal\">minimal</code>.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"
    values: "[always, on, off]"

archive_timeout:
    type: integer
    subtype: time
    min: 0
    max: 1073741823
    default: 0
    showDefault: "0 s"
    context: sighup
    unit: s

array_nulls:
    type: bool
    short: "Enable input of NULL elements in arrays."
    description: "<p>This controls whether the array input parser recognizes unquoted <code class=\"literal\">NULL</code> as specifying a null array element. By default, this is <code class=\"literal\">on</code>, allowing array values containing null values to be entered. However, <span class=\"productname\">PostgreSQL</span> versions before 8.2 did not support null values in arrays, and therefore would treat <code class=\"literal\">NULL</code> as specifying a normal array element with the string value <span class=\"quote\">NULL</span>. For backward compatibility with applications that require the old behavior, this variable can be turned <code class=\"literal\">off</code>.</p><p>Note that it is possible to create array values containing null values even when this variable is <code class=\"literal\">off</code>.</p>"
    default: on
    showDefault: "on"
    context: user

authentication_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum allowed time to complete client authentication."
    description: "<p>Maximum amount of time allowed to complete client authentication. If a would-be client has not completed the authentication protocol in this much time, the server closes the connection. This prevents hung clients from occupying a connection indefinitely. If this value is specified without units, it is taken as seconds. The default is one minute (<code class=\"literal\">1m</code>). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 1
    max: 600
    default: 60
    showDefault: "1 min"
    context: sighup
    unit: s

autovacuum:
    type: bool
    short: "Starts the autovacuum subprocess."
    description: "<p>Controls whether the server should run the autovacuum launcher daemon. This is on by default; however, <code class=\"varname\">track_counts</code> must also be enabled for autovacuum to work. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; however, autovacuuming can be disabled for individual tables by changing table storage parameters.</p><p>Note that even when this parameter is disabled, the system will launch autovacuum processes if necessary to prevent transaction ID wraparound. See <span class=\"xref\">vacuum-for-wraparound</span> for more information.</p>"
    default: on
    showDefault: "on"
    context: sighup

autovacuum_analyze_scale_factor:
    type: real
    short: "Number of tuple inserts, updates, or deletes prior to analyze as a fraction of reltuples."
    description: "<p>Specifies a fraction of the table size to add to <code class=\"varname\">autovacuum_analyze_threshold</code> when deciding whether to trigger an <span class=\"command\">ANALYZE</span>. The default is 0.1 (10% of table size). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: 0
    max: 100
    default: "0.1"
    showDefault: "0.1"
    context: sighup

autovacuum_analyze_threshold:
    type: integer
    short: "Minimum number of tuple inserts, updates, or deletes prior to analyze."
    description: "<p>Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an <span class=\"command\">ANALYZE</span> in any one table. The default is 50 tuples. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: 0
    max: 2147483647
    default: 50
    showDefault: 50
    context: sighup

autovacuum_freeze_max_age:
    type: integer
    short: "Age at which to autovacuum a table to prevent transaction ID wraparound."
    description: "<p>Specifies the maximum age (in transactions) that a table's <span class=\"structname\">pg_class</span>.<span class=\"structfield\">relfrozenxid</span> field can attain before a <span class=\"command\">VACUUM</span> operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.</p><p>Vacuum also allows removal of old files from the <span class=\"filename\">pg_xact</span> subdirectory, which is why the default is a relatively low 200 million transactions. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information see <span class=\"xref\">vacuum-for-wraparound</span>.</p>"
    min: 100000
    max: 2000000000
    default: 200000000
    showDefault: 200000000
    context: postmaster
    restart: "Gerektirir"

autovacuum_max_workers:
    type: integer
    short: "Sets the maximum number of simultaneously running autovacuum worker processes."
    description: "<p>Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.</p>"
    min: 1
    max: 262143
    default: 3
    showDefault: 3
    context: postmaster
    restart: "Gerektirir"

autovacuum_multixact_freeze_max_age:
    type: integer
    short: "Multixact age at which to autovacuum a table to prevent multixact wraparound."
    description: "<p>Specifies the maximum age (in multixacts) that a table's <span class=\"structname\">pg_class</span>.<span class=\"structfield\">relminmxid</span> field can attain before a <span class=\"command\">VACUUM</span> operation is forced to prevent multixact ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.</p><p>Vacuuming multixacts also allows removal of old files from the <span class=\"filename\">pg_multixact/members</span> and <span class=\"filename\">pg_multixact/offsets</span> subdirectories, which is why the default is a relatively low 400 million multixacts. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information see <span class=\"xref\">vacuum-for-multixact-wraparound</span>.</p>"
    min: 10000
    max: 2000000000
    default: 400000000
    showDefault: 400000000
    context: postmaster
    restart: "Gerektirir"

autovacuum_naptime:
    type: integer
    subtype: time
    short: "Time to sleep between autovacuum runs."
    description: "<p>Specifies the minimum delay between autovacuum runs on any given database. In each round the daemon examines the database and issues <span class=\"command\">VACUUM</span> and <span class=\"command\">ANALYZE</span> commands as needed for tables in that database. If this value is specified without units, it is taken as seconds. The default is one minute (<code class=\"literal\">1min</code>). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 1
    max: 2147483
    default: 60
    showDefault: "1 min"
    context: sighup
    unit: s

autovacuum_vacuum_cost_delay:
    type: real
    subtype: time
    short: "Vacuum cost delay in milliseconds, for autovacuum."
    description: "<p>Specifies the cost delay value that will be used in automatic <span class=\"command\">VACUUM</span> operations. If -1 is specified, the regular <code class=\"varname\">vacuum_cost_delay</code> value will be used. If this value is specified without units, it is taken as milliseconds. The default value is 2 milliseconds. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: "-1"
    max: 100
    default: 2
    showDefault: "2 ms"
    context: sighup
    unit: ms

autovacuum_vacuum_cost_limit:
    type: integer
    short: "Vacuum cost amount available before napping, for autovacuum."
    description: "<p>Specifies the cost limit value that will be used in automatic <span class=\"command\">VACUUM</span> operations. If -1 is specified (which is the default), the regular <code class=\"varname\">vacuum_cost_limit</code> value will be used. Note that the value is distributed proportionally among the running autovacuum workers, if there is more than one, so that the sum of the limits for each worker does not exceed the value of this variable. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: "-1"
    max: 10000
    default: "-1"
    showDefault: "-1"
    context: sighup

autovacuum_vacuum_insert_scale_factor:
    type: real
    short: "Number of tuple inserts prior to vacuum as a fraction of reltuples."
    description: "<p>Specifies a fraction of the table size to add to <code class=\"varname\">autovacuum_vacuum_insert_threshold</code> when deciding whether to trigger a <span class=\"command\">VACUUM</span>. The default is 0.2 (20% of table size). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: 0
    max: 100
    default: "0.2"
    showDefault: "0.2"
    context: sighup

autovacuum_vacuum_insert_threshold:
    type: integer
    short: "Minimum number of tuple inserts prior to vacuum, or -1 to disable insert vacuums."
    description: "<p>Specifies the number of inserted tuples needed to trigger a <span class=\"command\">VACUUM</span> in any one table. The default is 1000 tuples. If -1 is specified, autovacuum will not trigger a <span class=\"command\">VACUUM</span> operation on any tables based on the number of inserts. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: "-1"
    max: 2147483647
    default: 1000
    showDefault: 1000
    context: sighup

autovacuum_vacuum_scale_factor:
    type: real
    short: "Number of tuple updates or deletes prior to vacuum as a fraction of reltuples."
    description: "<p>Specifies a fraction of the table size to add to <code class=\"varname\">autovacuum_vacuum_threshold</code> when deciding whether to trigger a <span class=\"command\">VACUUM</span>. The default is 0.2 (20% of table size). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: 0
    max: 100
    default: "0.2"
    showDefault: "0.2"
    context: sighup

autovacuum_vacuum_threshold:
    type: integer
    short: "Minimum number of tuple updates or deletes prior to vacuum."
    description: "<p>Specifies the minimum number of updated or deleted tuples needed to trigger a <span class=\"command\">VACUUM</span> in any one table. The default is 50 tuples. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: 0
    max: 2147483647
    default: 50
    showDefault: 50
    context: sighup

autovacuum_work_mem:
    type: integer
    subtype: memory
    short: "Sets the maximum memory to be used by each autovacuum worker process."
    description: "<p>Specifies the maximum amount of memory to be used by each autovacuum worker process. If this value is specified without units, it is taken as kilobytes. It defaults to -1, indicating that the value of <code class=\"varname\">maintenance_work_mem</code> should be used instead. The setting has no effect on the behavior of <span class=\"command\">VACUUM</span> when run in other contexts.</p>"
    min: "-1"
    max: "2147483647 (2147483647 kB)"
    default: "-1"
    showDefault: "-1"
    context: sighup
    unit: kB

backend_flush_after:
    type: integer
    subtype: memory
    short: "Number of pages after which previously performed writes are flushed to disk."
    description: "<p>Whenever more than this amount of data has been written by a single backend, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when an <span class=\"function\">fsync</span> is issued at the end of a checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger than <code class=\"varname\">shared_buffers</code>, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The valid range is between <code class=\"literal\">0</code>, which disables forced writeback, and <code class=\"literal\">2MB</code>. The default is <code class=\"literal\">0</code>, i.e., no forced writeback. (If <code class=\"symbol\">BLCKSZ</code> is not 8kB, the maximum value scales proportionally to it.)</p>"
    min: 0
    max: 256
    default: 0
    showDefault: "0 kB"
    context: user
    unit: 8kB

check_function_bodies:
    type: bool
    short: "Check function bodies during CREATE FUNCTION."
    description: "<p>This parameter is normally on. When set to <code class=\"literal\">off</code>, it disables validation of the function body string during <span class=\"xref\">sql-createfunction</span>. Disabling validation avoids side effects of the validation process and avoids false positives due to problems such as forward references. Set this parameter to <code class=\"literal\">off</code> before loading functions on behalf of other users; <span class=\"application\">pg_dump</span> does so automatically.</p>"
    default: on
    showDefault: "on"
    context: user

checkpoint_completion_target:
    type: real
    short: "Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval."
    description: "<p>Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. The default is 0.5. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 1
    default: "0.5"
    showDefault: "0.5"
    context: sighup

backslash_quote:
    type: enum
    short: "Sets whether \"\\'\" is allowed in string literals."
    description: "<p>This controls whether a quote mark can be represented by <code class=\"literal\">\\'</code> in a string literal. The preferred, SQL-standard way to represent a quote mark is by doubling it (<code class=\"literal\">''</code>) but <span class=\"productname\">PostgreSQL</span> has historically also accepted <code class=\"literal\">\\'</code>. However, use of <code class=\"literal\">\\'</code> creates security risks because in some client character set encodings, there are multibyte characters in which the last byte is numerically equivalent to ASCII <code class=\"literal\">\\</code>. If client-side code does escaping incorrectly then a SQL-injection attack is possible. This risk can be prevented by making the server reject queries in which a quote mark appears to be escaped by a backslash. The allowed values of <code class=\"varname\">backslash_quote</code> are <code class=\"literal\">on</code> (allow <code class=\"literal\">\\'</code> always), <code class=\"literal\">off</code> (reject always), and <code class=\"literal\">safe_encoding</code> (allow only if client encoding does not allow ASCII <code class=\"literal\">\\</code> within a multibyte character). <code class=\"literal\">safe_encoding</code> is the default setting.</p><p>Note that in a standard-conforming string literal, <code class=\"literal\">\\</code> just means <code class=\"literal\">\\</code> anyway. This parameter only affects the handling of non-standard-conforming literals, including escape string syntax (<code class=\"literal\">E'...'</code>).</p>"
    default: safe_encoding
    showDefault: safe_encoding
    context: user
    values: "[safe_encoding, on, off]"

backtrace_functions:
    type: string
    short: "Log backtrace for errors in these functions."
    description: "<p>This parameter contains a comma-separated list of C function names. If an error is raised and the name of the internal C function where the error happens matches a value in the list, then a backtrace is written to the server log together with the error message. This can be used to debug specific areas of the source code.</p><p>Backtrace support is not available on all platforms, and the quality of the backtraces depends on compilation options.</p><p>This parameter can only be set by superusers.</p>"
    context: superuser
    
bgwriter_delay:
    type: integer
    subtype: time
    short: "Background writer sleep time between rounds."
    description: "<p>Specifies the delay between activity rounds for the background writer. In each round the writer issues writes for some number of dirty buffers (controllable by the following parameters). It then sleeps for the length of <code class=\"varname\">bgwriter_delay</code>, and repeats. When there are no dirty buffers in the buffer pool, though, it goes into a longer sleep regardless of <code class=\"varname\">bgwriter_delay</code>. If this value is specified without units, it is taken as milliseconds. The default value is 200 milliseconds (<code class=\"literal\">200ms</code>). Note that on many systems, the effective resolution of sleep delays is 10 milliseconds; setting <code class=\"varname\">bgwriter_delay</code> to a value that is not a multiple of 10 might have the same results as setting it to the next higher multiple of 10. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: "10 (10ms)"
    max: "1000 (10s)"
    default: 200
    showDefault: "200 (200ms)"
    context: sighup
    unit: "milliseconds (ms)"

bgwriter_flush_after:
    type: integer
    subtype: memory
    short: "Number of pages after which previously performed writes are flushed to disk."
    description: "<p>Whenever more than this amount of data has been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when an <span class=\"function\">fsync</span> is issued at the end of a checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger than <code class=\"varname\">shared_buffers</code>, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The valid range is between <code class=\"literal\">0</code>, which disables forced writeback, and <code class=\"literal\">2MB</code>. The default is <code class=\"literal\">512kB</code> on Linux, <code class=\"literal\">0</code> elsewhere. (If <code class=\"symbol\">BLCKSZ</code> is not 8kB, the default and maximum values scale proportionally to it.) This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: "0 (0kB)"
    max: "256 (2MB)"
    default: 64
    showDefault: "64 (512kB)"
    context: sighup
    unit: 8kB

bgwriter_lru_maxpages:
    type: integer
    short: "Background writer maximum number of LRU pages to flush per round."
    description: "<p>In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. (Note that checkpoints, which are managed by a separate, dedicated auxiliary process, are unaffected.) The default value is 100 buffers. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 1073741823
    default: 100
    showDefault: 100
    context: sighup

bgwriter_lru_multiplier:
    type: real
    short: "Multiple of the average buffer usage to free per round."
    description: "<p>The number of dirty buffers written in each round is based on the number of new buffers that have been needed by server processes during recent rounds. The average recent need is multiplied by <code class=\"varname\">bgwriter_lru_multiplier</code> to arrive at an estimate of the number of buffers that will be needed during the next round. Dirty buffers are written until there are that many clean, reusable buffers available. (However, no more than <code class=\"varname\">bgwriter_lru_maxpages</code> buffers will be written per round.) Thus, a setting of 1.0 represents a <span class=\"quote\">just in time</span> policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 10
    default: 2
    showDefault: 2
    context: sighup

bonjour:
    type: bool
    short: "Enables advertising the server via Bonjour."
    description: "<p>Enables advertising the server's existence via <span class=\"productname\">Bonjour</span>. The default is off. This parameter can only be set at server start.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

bonjour_name:
    type: string
    short: "Sets the Bonjour service name."
    description: "<p>Specifies the <span class=\"productname\">Bonjour</span> service name. The computer name is used if this parameter is set to the empty string <code class=\"literal\">''</code> (which is the default). This parameter is ignored if the server was not compiled with <span class=\"productname\">Bonjour</span> support. This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

vacuum_cost_page_dirty:
    type: integer
    short: "Vacuum cost for a page dirtied by vacuum."
    description: "<p>The estimated cost charged when vacuum modifies a block that was previously clean. It represents the extra I/O required to flush the dirty block out to disk again. The default value is 20.</p>"
    min: 0
    max: 10000
    default: 20
    showDefault: 20
    context: user

checkpoint_flush_after:
    type: integer
    subtype: memory
    short: "Number of pages after which previously performed writes are flushed to disk."
    description: "<p>Whenever more than this amount of data has been written while performing a checkpoint, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when an <span class=\"function\">fsync</span> is issued at the end of the checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger than <code class=\"varname\">shared_buffers</code>, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The valid range is between <code class=\"literal\">0</code>, which disables forced writeback, and <code class=\"literal\">2MB</code>. The default is <code class=\"literal\">256kB</code> on Linux, <code class=\"literal\">0</code> elsewhere. (If <code class=\"symbol\">BLCKSZ</code> is not 8kB, the default and maximum values scale proportionally to it.) This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 256
    default: 32
    showDefault: "256 kB"
    context: sighup
    unit: 8kB

checkpoint_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum time between automatic WAL checkpoints."
    description: "<p>Maximum time between automatic WAL checkpoints. If this value is specified without units, it is taken as seconds. The valid range is between 30 seconds and one day. The default is five minutes (<code class=\"literal\">5min</code>). Increasing this parameter can increase the amount of time needed for crash recovery. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 30
    max: 86400
    default: 300
    showDefault: "5 min"
    context: sighup
    unit: s

checkpoint_warning:
    type: integer
    subtype: time
    short: "Enables warnings if checkpoint segments are filled more frequently than this."
    description: "<p>Write a message to the server log if checkpoints caused by the filling of WAL segment files happen closer together than this amount of time (which suggests that <code class=\"varname\">max_wal_size</code> ought to be raised). If this value is specified without units, it is taken as seconds. The default is 30 seconds (<code class=\"literal\">30s</code>). Zero disables the warning. No warnings will be generated if <code class=\"varname\">checkpoint_timeout</code> is less than <code class=\"varname\">checkpoint_warning</code>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 30
    showDefault: "30 s"
    context: sighup
    unit: s

client_encoding:
    type: string
    short: "Sets the client's character set encoding."
    description: "<p>Sets the client-side encoding (character set). The default is to use the database encoding. The character sets supported by the <span class=\"productname\">PostgreSQL</span> server are described in <span class=\"xref\">multibyte-charset-supported</span>.</p>"
    default: SQL_ASCII
    showDefault: SQL_ASCII
    context: user

client_min_messages:
    type: enum
    short: "Sets the message levels that are sent to the client."
    description: "<p>Controls which <span class=\"link\">message levels</span> are sent to the client. Valid values are <code class=\"literal\">DEBUG5</code>, <code class=\"literal\">DEBUG4</code>, <code class=\"literal\">DEBUG3</code>, <code class=\"literal\">DEBUG2</code>, <code class=\"literal\">DEBUG1</code>, <code class=\"literal\">LOG</code>, <code class=\"literal\">NOTICE</code>, <code class=\"literal\">WARNING</code>, and <code class=\"literal\">ERROR</code>. Each level includes all the levels that follow it. The later the level, the fewer messages are sent. The default is <code class=\"literal\">NOTICE</code>. Note that <code class=\"literal\">LOG</code> has a different rank here than in <code class=\"varname\">log_min_messages</code>.</p><p><code class=\"literal\">INFO</code> level messages are always sent to the client.</p>"
    default: notice
    showDefault: notice
    context: user
    values: "[debug5, debug4, debug3, debug2, debug1, log, notice, warning, error]"

cluster_name:
    type: string
    short: "Sets the name of the cluster, which is included in the process title."
    description: "<p>Sets a name that identifies this database cluster (instance) for various purposes. The cluster name appears in the process title for all server processes in this cluster. Moreover, it is the default application name for a standby connection (see <code class=\"varname\">synchronous_standby_names</code>.)</p><p>The name can be any string of less than <code class=\"symbol\">NAMEDATALEN</code> characters (64 characters in a standard build). Only printable ASCII characters may be used in the <code class=\"varname\">cluster_name</code> value. Other characters will be replaced with question marks (<code class=\"literal\">?</code>). No name is shown if this parameter is set to the empty string <code class=\"literal\">''</code> (which is the default). This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

commit_delay:
    type: integer
    short: "Sets the delay in microseconds between transaction commit and flushing WAL to disk."
    description: "<p>Setting <code class=\"varname\">commit_delay</code> adds a time delay before a WAL flush is initiated. This can improve group commit throughput by allowing a larger number of transactions to commit via a single WAL flush, if system load is high enough that additional transactions become ready to commit within the given interval. However, it also increases latency by up to the <code class=\"varname\">commit_delay</code> for each WAL flush. Because the delay is just wasted if no other transactions become ready to commit, a delay is only performed if at least <code class=\"varname\">commit_siblings</code> other transactions are active when a flush is about to be initiated. Also, no delays are performed if <code class=\"varname\">fsync</code> is disabled. If this value is specified without units, it is taken as microseconds. The default <code class=\"varname\">commit_delay</code> is zero (no delay). Only superusers can change this setting.</p><p>In <span class=\"productname\">PostgreSQL</span> releases prior to 9.3, <code class=\"varname\">commit_delay</code> behaved differently and was much less effective: it affected only commits, rather than all WAL flushes, and waited for the entire configured delay even if the WAL flush was completed sooner. Beginning in <span class=\"productname\">PostgreSQL</span> 9.3, the first process that becomes ready to flush waits for the configured interval, while subsequent processes wait only until the leader completes the flush operation.</p>"
    min: 0
    max: 100000
    default: 0
    showDefault: 0
    context: superuser

commit_siblings:
    type: integer
    short: "Sets the minimum concurrent open transactions before performing commit_delay."
    description: "<p>Minimum number of concurrent open transactions to require before performing the <code class=\"varname\">commit_delay</code> delay. A larger value makes it more probable that at least one other transaction will become ready to commit during the delay interval. The default is five transactions.</p>"
    min: 0
    max: 1000
    default: 5
    showDefault: 5
    context: user

config_file:
    type: string
    short: "Sets the server's main configuration file."
    description: "<p>Specifies the main server configuration file (customarily called <span class=\"filename\">postgresql.conf</span>). This parameter can only be set on the <span class=\"command\">postgres</span> command line.</p>"
    context: postmaster
    restart: "Gerektirir"

constraint_exclusion:
    type: enum
    short: "Enables the planner to use constraints to optimize queries."
    description: "<p>Controls the query planner's use of table constraints to optimize queries. The allowed values of <code class=\"varname\">constraint_exclusion</code> are <code class=\"literal\">on</code> (examine constraints for all tables), <code class=\"literal\">off</code> (never examine constraints), and <code class=\"literal\">partition</code> (examine constraints only for inheritance child tables and <code class=\"literal\">UNION ALL</code> subqueries). <code class=\"literal\">partition</code> is the default setting. It is often used with traditional inheritance trees to improve performance.</p><p>When this parameter allows it for a particular table, the planner compares query conditions with the table's <code class=\"literal\">CHECK</code> constraints, and omits scanning tables for which the conditions contradict the constraints. For example:<span class=\"programlisting\">CREATE TABLE parent(key integer, ...);CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);...SELECT * FROM parent WHERE key = 2400;</span> With constraint exclusion enabled, this <span class=\"command\">SELECT</span> will not scan <span class=\"structname\">child1000</span> at all, improving performance.</p><p>Currently, constraint exclusion is enabled by default only for cases that are often used to implement table partitioning via inheritance trees. Turning it on for all tables imposes extra planning overhead that is quite noticeable on simple queries, and most often will yield no benefit for simple queries. If you have no tables that are partitioned using traditional inheritance, you might prefer to turn it off entirely. (Note that the equivalent feature for partitioned tables is controlled by a separate parameter, <code class=\"varname\">enable_partition_pruning</code>.)</p><p>Refer to <span class=\"xref\">ddl-partitioning-constraint-exclusion</span> for more information on using constraint exclusion to implement partitioning.</p>"
    default: partition
    showDefault: partition
    context: user
    values: "[partition, on, off]"

cpu_index_tuple_cost:
    type: real
    short: "Sets the planner's estimate of the cost of processing each index entry during an index scan."
    description: "<p>Sets the planner's estimate of the cost of processing each index entry during an index scan. The default is 0.005.</p>"
    min: 0
    max: "1.79769e+308"
    default: "0.005"
    showDefault: "0.005"
    context: user

cpu_operator_cost:
    type: real
    short: "Sets the planner's estimate of the cost of processing each operator or function call."
    description: "<p>Sets the planner's estimate of the cost of processing each operator or function executed during a query. The default is 0.0025.</p>"
    min: 0
    max: "1.79769e+308"
    default: "0.0025"
    showDefault: "0.0025"
    context: user

cpu_tuple_cost:
    type: real
    short: "Sets the planner's estimate of the cost of processing each tuple (row)."
    description: "<p>Sets the planner's estimate of the cost of processing each row during a query. The default is 0.01.</p>"
    min: 0
    max: "1.79769e+308"
    default: "0.01"
    showDefault: "0.01"
    context: user

cursor_tuple_fraction:
    type: real
    short: "Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved."
    description: "<p>Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved. The default is 0.1. Smaller values of this setting bias the planner towards using <span class=\"quote\">fast start</span> plans for cursors, which will retrieve the first few rows quickly while perhaps taking a long time to fetch all rows. Larger values put more emphasis on the total estimated time. At the maximum setting of 1.0, cursors are planned exactly like regular queries, considering only the total estimated time and not how soon the first rows might be delivered.</p>"
    min: 0
    max: 1
    default: "0.1"
    showDefault: "0.1"
    context: user

data_directory:
    type: string
    short: "Sets the server's data directory."
    description: "<p>Specifies the directory to use for data storage. This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

data_sync_retry:
    type: bool
    short: "Whether to continue running after a failure to sync data files."
    description: "<p>When set to off, which is the default, <span class=\"productname\">PostgreSQL</span> will raise a PANIC-level error on failure to flush modified data files to the file system. This causes the database server to crash. This parameter can only be set at server start.</p><p>On some operating systems, the status of data in the kernel's page cache is unknown after a write-back failure. In some cases it might have been entirely forgotten, making it unsafe to retry; the second attempt may be reported as successful, when in fact the data has been lost. In these circumstances, the only way to avoid data loss is to recover from the WAL after any failure is reported, preferably after investigating the root cause of the failure and replacing any faulty hardware.</p><p>If set to on, <span class=\"productname\">PostgreSQL</span> will instead report an error but continue to run so that the data flushing operation can be retried in a later checkpoint. Only set it to on after investigating the operating system's treatment of buffered data in case of write-back failure.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

DateStyle:
    type: string
    short: "Sets the display format for date and time values."
    description: "<p>Sets the display format for date and time values, as well as the rules for interpreting ambiguous date input values. For historical reasons, this variable contains two independent components: the output format specification (<code class=\"literal\">ISO</code>, <code class=\"literal\">Postgres</code>, <code class=\"literal\">SQL</code>, or <code class=\"literal\">German</code>) and the input/output specification for year/month/day ordering (<code class=\"literal\">DMY</code>, <code class=\"literal\">MDY</code>, or <code class=\"literal\">YMD</code>). These can be set separately or together. The keywords <code class=\"literal\">Euro</code> and <code class=\"literal\">European</code> are synonyms for <code class=\"literal\">DMY</code>; the keywords <code class=\"literal\">US</code>, <code class=\"literal\">NonEuro</code>, and <code class=\"literal\">NonEuropean</code> are synonyms for <code class=\"literal\">MDY</code>. See <span class=\"xref\">datatype-datetime</span> for more information. The built-in default is <code class=\"literal\">ISO, MDY</code>, but <span class=\"application\">initdb</span> will initialize the configuration file with a setting that corresponds to the behavior of the chosen <code class=\"varname\">lc_time</code> locale.</p>"
    default: "ISO, MDY"
    showDefault: "ISO, MDY"
    context: user

db_user_namespace:
    type: bool
    short: "Enables per-database user names."
    description: "<p>This parameter enables per-database user names. It is off by default. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>If this is on, you should create users as <span class=\"replaceable\">username@dbname</span>. When <span class=\"replaceable\">username</span> is passed by a connecting client, <code class=\"literal\">@</code> and the database name are appended to the user name and that database-specific user name is looked up by the server. Note that when you create users with names containing <code class=\"literal\">@</code> within the SQL environment, you will need to quote the user name.</p><p>With this parameter enabled, you can still create ordinary global users. Simply append <code class=\"literal\">@</code> when specifying the user name in the client, e.g., <code class=\"literal\">joe@</code>. The <code class=\"literal\">@</code> will be stripped off before the user name is looked up by the server.</p><p><code class=\"varname\">db_user_namespace</code> causes the client's and server's user name representation to differ. Authentication checks are always done with the server's user name so authentication methods must be configured for the server's user name, not the client's. Because <code class=\"literal\">md5</code> uses the user name as salt on both the client and server, <code class=\"literal\">md5</code> cannot be used with <code class=\"varname\">db_user_namespace</code>.</p><span class=\"note\"><p>This feature is intended as a temporary measure until a complete solution is found. At that time, this option will be removed.</p></span>"
    default: "off"
    showDefault: "off"
    context: sighup

deadlock_timeout:
    type: integer
    subtype: time
    short: "Sets the time to wait on a lock before checking for deadlock."
    description: "<p>This is the amount of time to wait on a lock before checking to see if there is a deadlock condition. The check for deadlock is relatively expensive, so the server doesn't run it every time it waits for a lock. We optimistically assume that deadlocks are not common in production applications and just wait on the lock for a while before checking for a deadlock. Increasing this value reduces the amount of time wasted in needless deadlock checks, but slows down reporting of real deadlock errors. If this value is specified without units, it is taken as milliseconds. The default is one second (<code class=\"literal\">1s</code>), which is probably about the smallest value you would want in practice. On a heavily loaded server you might want to raise it. Ideally the setting should exceed your typical transaction time, so as to improve the odds that a lock will be released before the waiter decides to check for deadlock. Only superusers can change this setting.</p><p>When <code class=\"varname\">log_lock_waits</code> is set, this parameter also determines the amount of time to wait before a log message is issued about the lock wait. If you are trying to investigate locking delays you might want to set a shorter than normal <code class=\"varname\">deadlock_timeout</code>.</p>"
    min: 1
    max: 2147483647
    default: 1000
    showDefault: "1 s"
    context: superuser
    unit: ms

debug_pretty_print:
    type: bool
    short: "Indents parse and plan tree displays."
    description: "<p>When set, <code class=\"varname\">debug_pretty_print</code> indents the messages produced by <code class=\"varname\">debug_print_parse</code>, <code class=\"varname\">debug_print_rewritten</code>, or <code class=\"varname\">debug_print_plan</code>. This results in more readable but much longer output than the <span class=\"quote\">compact</span> format used when it is off. It is on by default.</p>"
    default: on
    showDefault: "on"
    context: user

debug_print_parse:
    type: bool
    short: "Logs each query's parse tree."
    description: "<p>These parameters enable various debugging output to be emitted. When set, they print the resulting parse tree, the query rewriter output, or the execution plan for each executed query. These messages are emitted at <code class=\"literal\">LOG</code> message level, so by default they will appear in the server log but will not be sent to the client. You can change that by adjusting <code class=\"varname\">client_min_messages</code> and/or <code class=\"varname\">log_min_messages</code>. These parameters are off by default.</p>"
    default: "off"
    showDefault: "off"
    context: user

debug_print_plan:
    type: bool
    short: "Logs each query's execution plan."
    description: "<p>These parameters enable various debugging output to be emitted. When set, they print the resulting parse tree, the query rewriter output, or the execution plan for each executed query. These messages are emitted at <code class=\"literal\">LOG</code> message level, so by default they will appear in the server log but will not be sent to the client. You can change that by adjusting <code class=\"varname\">client_min_messages</code> and/or <code class=\"varname\">log_min_messages</code>. These parameters are off by default.</p>"
    default: "off"
    showDefault: "off"
    context: user

debug_print_rewritten:
    type: bool
    short: "Logs each query's rewritten parse tree."
    description: "<p>These parameters enable various debugging output to be emitted. When set, they print the resulting parse tree, the query rewriter output, or the execution plan for each executed query. These messages are emitted at <code class=\"literal\">LOG</code> message level, so by default they will appear in the server log but will not be sent to the client. You can change that by adjusting <code class=\"varname\">client_min_messages</code> and/or <code class=\"varname\">log_min_messages</code>. These parameters are off by default.</p>"
    default: "off"
    showDefault: "off"
    context: user

default_statistics_target:
    type: integer
    short: "Sets the default statistics target."
    description: "<p>Sets the default statistics target for table columns without a column-specific target set via <span class=\"command\">ALTER TABLE SET STATISTICS</span>. Larger values increase the time needed to do <span class=\"command\">ANALYZE</span>, but might improve the quality of the planner's estimates. The default is 100. For more information on the use of statistics by the <span class=\"productname\">PostgreSQL</span> query planner, refer to <span class=\"xref\">planner-stats</span>.</p>"
    min: 1
    max: 10000
    default: 100
    showDefault: 100
    context: user

default_table_access_method:
    type: string
    short: "Sets the default table access method for new tables."
    description: "<p>This parameter specifies the default table access method to use when creating tables or materialized views if the <span class=\"command\">CREATE</span> command does not explicitly specify an access method, or when <span class=\"command\">SELECT ... INTO</span> is used, which does not allow to specify a table access method. The default is <code class=\"literal\">heap</code>.</p>"
    default: heap
    showDefault: heap
    context: user

default_tablespace:
    type: string
    short: "Sets the default tablespace to create tables and indexes in."
    description: "<p>This variable specifies the default tablespace in which to create objects (tables and indexes) when a <span class=\"command\">CREATE</span> command does not explicitly specify a tablespace. It also determines the tablespace that a partitioned relation will direct future partitions to.</p><p>The value is either the name of a tablespace, or an empty string to specify using the default tablespace of the current database. If the value does not match the name of any existing tablespace, <span class=\"productname\">PostgreSQL</span> will automatically use the default tablespace of the current database. If a nondefault tablespace is specified, the user must have <code class=\"literal\">CREATE</code> privilege for it, or creation attempts will fail.</p><p>This variable is not used for temporary tables; for them, <code class=\"varname\">temp_tablespaces</code> is consulted instead.</p><p>This variable is also not used when creating databases. By default, a new database inherits its tablespace setting from the template database it is copied from.</p><p>For more information on tablespaces, see <span class=\"xref\">manage-ag-tablespaces</span>.</p>"
    context: user

default_text_search_config:
    type: string
    short: "Sets default text search configuration."
    description: "<p>Selects the text search configuration that is used by those variants of the text search functions that do not have an explicit argument specifying the configuration. See <span class=\"xref\">textsearch</span> for further information. The built-in default is <code class=\"literal\">pg_catalog.simple</code>, but <span class=\"application\">initdb</span> will initialize the configuration file with a setting that corresponds to the chosen <code class=\"varname\">lc_ctype</code> locale, if a configuration matching that locale can be identified.</p>"
    default: "pg_catalog.simple"
    showDefault: "pg_catalog.simple"
    context: user

enable_seqscan:
    type: bool
    short: "Enables the planner's use of sequential-scan plans."
    description: "<p>Enables or disables the query planner's use of sequential scan plan types. It is impossible to suppress sequential scans entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

default_transaction_deferrable:
    type: bool
    short: "Sets the default deferrable status of new transactions."
    description: "<p>When running at the <code class=\"literal\">serializable</code> isolation level, a deferrable read-only SQL transaction may be delayed before it is allowed to proceed. However, once it begins executing it does not incur any of the overhead required to ensure serializability; so serialization code will have no reason to force it to abort because of concurrent updates, making this option suitable for long-running read-only transactions.</p><p>This parameter controls the default deferrable status of each new transaction. It currently has no effect on read-write transactions or those operating at isolation levels lower than <code class=\"literal\">serializable</code>. The default is <code class=\"literal\">off</code>.</p><p>Consult <span class=\"xref\">sql-set-transaction</span> for more information.</p>"
    default: "off"
    showDefault: "off"
    context: user

default_transaction_isolation:
    type: enum
    short: "Sets the transaction isolation level of each new transaction."
    description: "<p>Each SQL transaction has an isolation level, which can be either <span class=\"quote\">read uncommitted</span>, <span class=\"quote\">read committed</span>, <span class=\"quote\">repeatable read</span>, or <span class=\"quote\">serializable</span>. This parameter controls the default isolation level of each new transaction. The default is <span class=\"quote\">read committed</span>.</p><p>Consult <span class=\"xref\">mvcc</span> and <span class=\"xref\">sql-set-transaction</span> for more information.</p>"
    default: "read committed"
    showDefault: "read committed"
    context: user
    values: "[serializable, repeatable read, read committed, read uncommitted]"

default_transaction_read_only:
    type: bool
    short: "Sets the default read-only status of new transactions."
    description: "<p>A read-only SQL transaction cannot alter non-temporary tables. This parameter controls the default read-only status of each new transaction. The default is <code class=\"literal\">off</code> (read/write).</p><p>Consult <span class=\"xref\">sql-set-transaction</span> for more information.</p>"
    default: "off"
    showDefault: "off"
    context: user

dynamic_library_path:
    type: string
    short: "Sets the path for dynamically loadable modules."
    description: "<p>If a dynamically loadable module needs to be opened and the file name specified in the <span class=\"command\">CREATE FUNCTION</span> or <span class=\"command\">LOAD</span> command does not have a directory component (i.e., the name does not contain a slash), the system will search this path for the required file.</p><p>The value for <code class=\"varname\">dynamic_library_path</code> must be a list of absolute directory paths separated by colons (or semi-colons on Windows). If a list element starts with the special string <code class=\"literal\">$libdir</code>, the compiled-in <span class=\"productname\">PostgreSQL</span> package library directory is substituted for <code class=\"literal\">$libdir</code>; this is where the modules provided by the standard <span class=\"productname\">PostgreSQL</span> distribution are installed. (Use <code class=\"literal\">pg_config --pkglibdir</code> to find out the name of this directory.) For example:<span class=\"programlisting\">dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'</span> or, in a Windows environment:<span class=\"programlisting\">dynamic_library_path = 'C:\\tools\\postgresql;H:\\my_project\\lib;$libdir'</span></p><p>The default value for this parameter is <code class=\"literal\">'$libdir'</code>. If the value is set to an empty string, the automatic path search is turned off.</p><p>This parameter can be changed at run time by superusers, but a setting done that way will only persist until the end of the client connection, so this method should be reserved for development purposes. The recommended way to set this parameter is in the <span class=\"filename\">postgresql.conf</span> configuration file.</p>"
    default: "$libdir"
    showDefault: "$libdir"
    context: superuser

dynamic_shared_memory_type:
    type: enum
    short: "Selects the dynamic shared memory implementation used."
    description: "<p>Specifies the dynamic shared memory implementation that the server should use. Possible values are <code class=\"literal\">posix</code> (for POSIX shared memory allocated using <code class=\"literal\">shm_open</code>), <code class=\"literal\">sysv</code> (for System V shared memory allocated via <code class=\"literal\">shmget</code>), <code class=\"literal\">windows</code> (for Windows shared memory), and <code class=\"literal\">mmap</code> (to simulate shared memory using memory-mapped files stored in the data directory). Not all values are supported on all platforms; the first supported option is the default for that platform. The use of the <code class=\"literal\">mmap</code> option, which is not the default on any platform, is generally discouraged because the operating system may write modified pages back to disk repeatedly, increasing system I/O load; however, it may be useful for debugging, when the <code class=\"literal\">pg_dynshmem</code> directory is stored on a RAM disk, or when other shared memory facilities are not available.</p>"
    default: posix
    showDefault: posix
    context: postmaster
    values: "[posix, sysv, mmap]"
    restart: "Gerektirir"

effective_cache_size:
    type: integer
    subtype: memory
    short: "Sets the planner's assumption about the total size of the data caches."
    description: "<p>Sets the planner's assumption about the effective size of the disk cache that is available to a single query. This is factored into estimates of the cost of using an index; a higher value makes it more likely index scans will be used, a lower value makes it more likely sequential scans will be used. When setting this parameter you should consider both <span class=\"productname\">PostgreSQL</span>'s shared buffers and the portion of the kernel's disk cache that will be used for <span class=\"productname\">PostgreSQL</span> data files, though some data might exist in both places. Also, take into account the expected number of concurrent queries on different tables, since they will have to share the available space. This parameter has no effect on the size of shared memory allocated by <span class=\"productname\">PostgreSQL</span>, nor does it reserve kernel disk cache; it is used only for estimation purposes. The system also does not assume data remains in the disk cache between queries. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The default is 4 gigabytes (<code class=\"literal\">4GB</code>). (If <code class=\"symbol\">BLCKSZ</code> is not 8kB, the default value scales proportionally to it.)</p>"
    min: 1
    max: 2147483647
    default: 524288
    showDefault: "4 GB"
    context: user
    unit: 8kB

enable_sort:
    type: bool
    short: "Enables the planner's use of explicit sort steps."
    description: "<p>Enables or disables the query planner's use of explicit sort steps. It is impossible to suppress explicit sorts entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_tidscan:
    type: bool
    short: "Enables the planner's use of TID scan plans."
    description: "<p>Enables or disables the query planner's use of <span class=\"acronym\">TID</span> scan plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

vacuum_cost_page_hit:
    type: integer
    short: "Vacuum cost for a page found in the buffer cache."
    description: "<p>The estimated cost for vacuuming a buffer found in the shared buffer cache. It represents the cost to lock the buffer pool, lookup the shared hash table and scan the content of the page. The default value is one.</p>"
    min: 0
    max: 10000
    default: 1
    showDefault: 1
    context: user

effective_io_concurrency:
    type: integer
    short: "Number of simultaneous requests that can be handled efficiently by the disk subsystem."
    description: "<p>Sets the number of concurrent disk I/O operations that <span class=\"productname\">PostgreSQL</span> expects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individual <span class=\"productname\">PostgreSQL</span> session attempts to initiate in parallel. The allowed range is 1 to 1000, or zero to disable issuance of asynchronous I/O requests. Currently, this setting only affects bitmap heap scans.</p><p>For magnetic drives, a good starting point for this setting is the number of separate drives comprising a RAID 0 stripe or RAID 1 mirror being used for the database. (For RAID 5 the parity drive should not be counted.) However, if the database is often busy with multiple queries issued in concurrent sessions, lower values may be sufficient to keep the disk array busy. A value higher than needed to keep the disks busy will only result in extra CPU overhead. SSDs and other memory-based storage can often process many concurrent requests, so the best value might be in the hundreds.</p><p>Asynchronous I/O depends on an effective <span class=\"function\">posix_fadvise</span> function, which some operating systems lack. If the function is not present then setting this parameter to anything but zero will result in an error. On some operating systems (e.g., Solaris), the function is present but does not actually do anything.</p><p>The default is 1 on supported systems, otherwise 0. This value can be overridden for tables in a particular tablespace by setting the tablespace parameter of the same name (see <span class=\"xref\">sql-altertablespace</span>).</p>"
    min: 0
    max: 1000
    default: 1
    showDefault: 1
    context: user

enable_bitmapscan:
    type: bool
    short: "Enables the planner's use of bitmap-scan plans."
    description: "<p>Enables or disables the query planner's use of bitmap-scan plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_gathermerge:
    type: bool
    short: "Enables the planner's use of gather merge plans."
    description: "<p>Enables or disables the query planner's use of gather merge plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_hashagg:
    type: bool
    short: "Enables the planner's use of hashed aggregation plans."
    description: "<p>Enables or disables the query planner's use of hashed aggregation plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_hashjoin:
    type: bool
    short: "Enables the planner's use of hash join plans."
    description: "<p>Enables or disables the query planner's use of hash-join plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_incremental_sort:
    type: bool
    short: "Enables the planner's use of incremental sort steps."
    description: "<p>Enables or disables the query planner's use of incremental sort steps. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_indexonlyscan:
    type: bool
    short: "Enables the planner's use of index-only-scan plans."
    description: "<p>Enables or disables the query planner's use of index-only-scan plan types (see <span class=\"xref\">indexes-index-only-scans</span>). The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_indexscan:
    type: bool
    short: "Enables the planner's use of index-scan plans."
    description: "<p>Enables or disables the query planner's use of index-scan plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_material:
    type: bool
    short: "Enables the planner's use of materialization."
    description: "<p>Enables or disables the query planner's use of materialization. It is impossible to suppress materialization entirely, but turning this variable off prevents the planner from inserting materialize nodes except in cases where it is required for correctness. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_mergejoin:
    type: bool
    short: "Enables the planner's use of merge join plans."
    description: "<p>Enables or disables the query planner's use of merge-join plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_nestloop:
    type: bool
    short: "Enables the planner's use of nested-loop join plans."
    description: "<p>Enables or disables the query planner's use of nested-loop join plans. It is impossible to suppress nested-loop joins entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_parallel_append:
    type: bool
    short: "Enables the planner's use of parallel append plans."
    description: "<p>Enables or disables the query planner's use of parallel-aware append plan types. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_parallel_hash:
    type: bool
    short: "Enables the planner's use of parallel hash plans."
    description: "<p>Enables or disables the query planner's use of hash-join plan types with parallel hash. Has no effect if hash-join plans are not also enabled. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

enable_partition_pruning:
    type: bool
    short: "Enables plan-time and run-time partition pruning."
    description: "<p>Enables or disables the query planner's ability to eliminate a partitioned table's partitions from query plans. This also controls the planner's ability to generate query plans which allow the query executor to remove (ignore) partitions during query execution. The default is <code class=\"literal\">on</code>. See <span class=\"xref\">ddl-partition-pruning</span> for details.</p>"
    default: on
    showDefault: "on"
    context: user

enable_partitionwise_aggregate:
    type: bool
    short: "Enables partitionwise aggregation and grouping."
    description: "<p>Enables or disables the query planner's use of partitionwise grouping or aggregation, which allows grouping or aggregation on a partitioned tables performed separately for each partition. If the <code class=\"literal\">GROUP BY</code> clause does not include the partition keys, only partial aggregation can be performed on a per-partition basis, and finalization must be performed later. Because partitionwise grouping or aggregation can use significantly more CPU time and memory during planning, the default is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: user

enable_partitionwise_join:
    type: bool
    short: "Enables partitionwise join."
    description: "<p>Enables or disables the query planner's use of partitionwise join, which allows a join between partitioned tables to be performed by joining the matching partitions. Partitionwise join currently applies only when the join conditions include all the partition keys, which must be of the same data type and have one-to-one matching sets of child partitions. Because partitionwise join planning can use significantly more CPU time and memory during planning, the default is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: user

escape_string_warning:
    type: bool
    short: "Warn about backslash escapes in ordinary string literals."
    description: "<p>When on, a warning is issued if a backslash (<code class=\"literal\">\\</code>) appears in an ordinary string literal (<code class=\"literal\">'...'</code> syntax) and <code class=\"varname\">standard_conforming_strings</code> is off. The default is <code class=\"literal\">on</code>.</p><p>Applications that wish to use backslash as escape should be modified to use escape string syntax (<code class=\"literal\">E'...'</code>), because the default behavior of ordinary strings is now to treat backslash as an ordinary character, per SQL standard. This variable can be enabled to help locate code that needs to be changed.</p>"
    default: on
    showDefault: "on"
    context: user

event_source:
    type: string
    short: "Sets the application name used to identify PostgreSQL messages in the event log."
    description: "<p>When logging to <span class=\"application\">event log</span> is enabled, this parameter determines the program name used to identify <span class=\"productname\">PostgreSQL</span> messages in the log. The default is <code class=\"literal\">PostgreSQL</code>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: PostgreSQL
    showDefault: PostgreSQL
    context: postmaster
    restart: "Gerektirir"

exit_on_error:
    type: bool
    short: "Terminate session on any error."
    description: "<p>If on, any error will terminate the current session. By default, this is set to off, so that only FATAL errors will terminate the session.</p>"
    default: "off"
    showDefault: "off"
    context: user

external_pid_file:
    type: string
    short: "Writes the postmaster PID to the specified file."
    description: "<p>Specifies the name of an additional process-ID (PID) file that the server should create for use by server administration programs. This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

extra_float_digits:
    type: integer
    short: "Sets the number of digits displayed for floating-point values."
    description: "<p>This parameter adjusts the number of digits used for textual output of floating-point values, including <span class=\"type\">float4</span>, <span class=\"type\">float8</span>, and geometric data types.</p><p>If the value is 1 (the default) or above, float values are output in shortest-precise format; see <span class=\"xref\">datatype-float</span>. The actual number of digits generated depends only on the value being output, not on the value of this parameter. At most 17 digits are required for <span class=\"type\">float8</span> values, and 9 for <span class=\"type\">float4</span> values. This format is both fast and precise, preserving the original binary float value exactly when correctly read. For historical compatibility, values up to 3 are permitted.</p><p>If the value is zero or negative, then the output is rounded to a given decimal precision. The precision used is the standard number of digits for the type (<code class=\"literal\">FLT_DIG</code> or <code class=\"literal\">DBL_DIG</code> as appropriate) reduced according to the value of this parameter. (For example, specifying -1 will cause <span class=\"type\">float4</span> values to be output rounded to 5 significant digits, and <span class=\"type\">float8</span> values rounded to 14 digits.) This format is slower and does not preserve all the bits of the binary float value, but may be more human-readable.</p><span class=\"note\"><p>The meaning of this parameter, and its default value, changed in <span class=\"productname\">PostgreSQL</span> 12; see <span class=\"xref\">datatype-float</span> for further discussion.</p></span>"
    min: "-15"
    max: 3
    default: 1
    showDefault: 1
    context: user

force_parallel_mode:
    type: enum
    short: "Forces use of parallel query facilities."
    description: "<p>Allows the use of parallel queries for testing purposes even in cases where no performance benefit is expected. The allowed values of <code class=\"varname\">force_parallel_mode</code> are <code class=\"literal\">off</code> (use parallel mode only when it is expected to improve performance), <code class=\"literal\">on</code> (force parallel query for all queries for which it is thought to be safe), and <code class=\"literal\">regress</code> (like <code class=\"literal\">on</code>, but with additional behavior changes as explained below).</p><p>More specifically, setting this value to <code class=\"literal\">on</code> will add a <code class=\"literal\">Gather</code> node to the top of any query plan for which this appears to be safe, so that the query runs inside of a parallel worker. Even when a parallel worker is not available or cannot be used, operations such as starting a subtransaction that would be prohibited in a parallel query context will be prohibited unless the planner believes that this will cause the query to fail. If failures or unexpected results occur when this option is set, some functions used by the query may need to be marked <code class=\"literal\">PARALLEL UNSAFE</code> (or, possibly, <code class=\"literal\">PARALLEL RESTRICTED</code>).</p><p>Setting this value to <code class=\"literal\">regress</code> has all of the same effects as setting it to <code class=\"literal\">on</code> plus some additional effects that are intended to facilitate automated regression testing. Normally, messages from a parallel worker include a context line indicating that, but a setting of <code class=\"literal\">regress</code> suppresses this line so that the output is the same as in non-parallel execution. Also, the <code class=\"literal\">Gather</code> nodes added to plans by this setting are hidden in <code class=\"literal\">EXPLAIN</code> output so that the output matches what would be obtained if this setting were turned <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: user
    values: "[off, on, regress]"

from_collapse_limit:
    type: integer
    short: "Sets the FROM-list size beyond which subqueries are not collapsed."
    description: "<p>The planner will merge sub-queries into upper queries if the resulting <code class=\"literal\">FROM</code> list would have no more than this many items. Smaller values reduce planning time but might yield inferior query plans. The default is eight. For more information see <span class=\"xref\">explicit-joins</span>.</p><p>Setting this value to <code class=\"varname\">geqo_threshold</code> or more may trigger use of the GEQO planner, resulting in non-optimal plans. See <span class=\"xref\">runtime-config-query-geqo</span>.</p>"
    min: 1
    max: 2147483647
    default: 8
    showDefault: 8
    context: user
fsync:
    type: bool
    short: "Forces synchronization of updates to disk."
    description: "<p>If this parameter is on, the <span class=\"productname\">PostgreSQL</span> server will try to make sure that updates are physically written to disk, by issuing <span class=\"function\">fsync()</span> system calls or various equivalent methods (see <code class=\"varname\">wal_sync_method</code>). This ensures that the database cluster can recover to a consistent state after an operating system or hardware crash.</p><p>While turning off <code class=\"varname\">fsync</code> is often a performance benefit, this can result in unrecoverable data corruption in the event of a power failure or system crash. Thus it is only advisable to turn off <code class=\"varname\">fsync</code> if you can easily recreate your entire database from external data.</p><p>Examples of safe circumstances for turning off <code class=\"varname\">fsync</code> include the initial loading of a new database cluster from a backup file, using a database cluster for processing a batch of data after which the database will be thrown away and recreated, or for a read-only database clone which gets recreated frequently and is not used for failover. High quality hardware alone is not a sufficient justification for turning off <code class=\"varname\">fsync</code>.</p><p>For reliable recovery when changing <code class=\"varname\">fsync</code> off to on, it is necessary to force all modified buffers in the kernel to durable storage. This can be done while the cluster is shutdown or while <code class=\"varname\">fsync</code> is on by running <span class=\"command\">initdb --sync-only</span>, running <span class=\"command\">sync</span>, unmounting the file system, or rebooting the server.</p><p>In many situations, turning off <code class=\"varname\">synchronous_commit</code> for noncritical transactions can provide much of the potential performance benefit of turning off <code class=\"varname\">fsync</code>, without the attendant risks of data corruption.</p><p><code class=\"varname\">fsync</code> can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. If you turn this parameter off, also consider turning off <code class=\"varname\">full_page_writes</code>.</p>"
    default: on
    showDefault: "on"
    context: sighup

hot_standby:
    type: bool
    short: "Allows connections and queries during recovery."
    description: "<p>Specifies whether or not you can connect and run queries during recovery, as described in <span class=\"xref\">hot-standby</span>. The default value is <code class=\"literal\">on</code>. This parameter can only be set at server start. It only has effect during archive recovery or in standby mode.</p>"
    default: on
    showDefault: "on"
    context: postmaster
    restart: "Gerektirir"

full_page_writes:
    type: bool
    short: "Writes full pages to WAL when first modified after a checkpoint."
    description: "<p>When this parameter is on, the <span class=\"productname\">PostgreSQL</span> server writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint. This is needed because a page write that is in process during an operating system crash might be only partially completed, leading to an on-disk page that contains a mix of old and new data. The row-level change data normally stored in WAL will not be enough to completely restore such a page during post-crash recovery. Storing the full page image guarantees that the page can be correctly restored, but at the price of increasing the amount of data that must be written to WAL. (Because WAL replay always starts from a checkpoint, it is sufficient to do this during the first change of each page after a checkpoint. Therefore, one way to reduce the cost of full-page writes is to increase the checkpoint interval parameters.)</p><p>Turning this parameter off speeds normal operation, but might lead to either unrecoverable data corruption, or silent data corruption, after a system failure. The risks are similar to turning off <code class=\"varname\">fsync</code>, though smaller, and it should be turned off only based on the same circumstances recommended for that parameter.</p><p>Turning off this parameter does not affect use of WAL archiving for point-in-time recovery (PITR) (see <span class=\"xref\">continuous-archiving</span>).</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: sighup

geqo:
    type: bool
    short: "Enables genetic query optimization."
    description: "<p>Enables or disables genetic query optimization. This is on by default. It is usually best not to turn it off in production; the <code class=\"varname\">geqo_threshold</code> variable provides more granular control of GEQO.</p>"
    default: on
    showDefault: "on"
    context: user

geqo_effort:
    type: integer
    short: "GEQO: effort is used to set the default for other GEQO parameters."
    description: "<p>Controls the trade-off between planning time and query plan quality in GEQO. This variable must be an integer in the range from 1 to 10. The default value is five. Larger values increase the time spent doing query planning, but also increase the likelihood that an efficient query plan will be chosen.</p><p><code class=\"varname\">geqo_effort</code> doesn't actually do anything directly; it is only used to compute the default values for the other variables that influence GEQO behavior (described below). If you prefer, you can set the other parameters by hand instead.</p>"
    min: 1
    max: 10
    default: 5
    showDefault: 5
    context: user

geqo_generations:
    type: integer
    short: "GEQO: number of iterations of the algorithm."
    description: "<p>Controls the number of generations used by GEQO, that is the number of iterations of the algorithm. It must be at least one, and useful values are in the same range as the pool size. If it is set to zero (the default setting) then a suitable value is chosen based on <code class=\"varname\">geqo_pool_size</code>.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: 0
    context: user

geqo_pool_size:
    type: integer
    short: "GEQO: number of individuals in the population."
    description: "<p>Controls the pool size used by GEQO, that is the number of individuals in the genetic population. It must be at least two, and useful values are typically 100 to 1000. If it is set to zero (the default setting) then a suitable value is chosen based on <code class=\"varname\">geqo_effort</code> and the number of tables in the query.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: 0
    context: user

geqo_seed:
    type: real
    short: "GEQO: seed for random path selection."
    description: "<p>Controls the initial value of the random number generator used by GEQO to select random paths through the join order search space. The value can range from zero (the default) to one. Varying the value changes the set of join paths explored, and may result in a better or worse best path being found.</p>"
    min: 0
    max: 1
    default: 0
    showDefault: 0
    context: user

geqo_selection_bias:
    type: real
    short: "GEQO: selective pressure within the population."
    description: "<p>Controls the selection bias used by GEQO. The selection bias is the selective pressure within the population. Values can be from 1.50 to 2.00; the latter is the default.</p>"
    min: "1.5"
    max: 2
    default: 2
    showDefault: 2
    context: user

geqo_threshold:
    type: integer
    short: "Sets the threshold of FROM items beyond which GEQO is used."
    description: "<p>Use genetic query optimization to plan queries with at least this many <code class=\"literal\">FROM</code> items involved. (Note that a <code class=\"literal\">FULL OUTER JOIN</code> construct counts as only one <code class=\"literal\">FROM</code> item.) The default is 12. For simpler queries it is usually best to use the regular, exhaustive-search planner, but for queries with many tables the exhaustive search takes too long, often longer than the penalty of executing a suboptimal plan. Thus, a threshold on the size of the query is a convenient way to manage use of GEQO.</p>"
    min: 2
    max: 2147483647
    default: 12
    showDefault: 12
    context: user

gin_fuzzy_search_limit:
    type: integer
    short: "Sets the maximum allowed result for exact search by GIN."
    description: "<p>Soft upper limit of the size of the set returned by GIN index scans. For more information see <span class=\"xref\">gin-tips</span>.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: 0
    context: user

gin_pending_list_limit:
    type: integer
    subtype: memory
    short: "Sets the maximum size of the pending list for GIN index."
    description: "<p>Sets the maximum size of a GIN index's pending list, which is used when <code class=\"literal\">fastupdate</code> is enabled. If the list grows larger than this maximum size, it is cleaned up by moving the entries in it to the index's main GIN data structure in bulk. If this value is specified without units, it is taken as kilobytes. The default is four megabytes (<code class=\"literal\">4MB</code>). This setting can be overridden for individual GIN indexes by changing index storage parameters. See <span class=\"xref\">gin-fast-update</span> and <span class=\"xref\">gin-tips</span> for more information.</p>"
    min: 64
    max: 2147483647
    default: 4096
    showDefault: "4 MB"
    context: user
    unit: kB

hash_mem_multiplier:
    type: real
    short: "Multiple of work_mem to use for hash tables."
    description: "<p>Used to compute the maximum amount of memory that hash-based operations can use. The final limit is determined by multiplying <code class=\"varname\">work_mem</code> by <code class=\"varname\">hash_mem_multiplier</code>. The default value is 1.0, which makes hash-based operations subject to the same simple <code class=\"varname\">work_mem</code> maximum as sort-based operations.</p><p>Consider increasing <code class=\"varname\">hash_mem_multiplier</code> in environments where spilling by query operations is a regular occurrence, especially when simply increasing <code class=\"varname\">work_mem</code> results in memory pressure (memory pressure typically takes the form of intermittent out of memory errors). A setting of 1.5 or 2.0 may be effective with mixed workloads. Higher settings in the range of 2.0 - 8.0 or more may be effective in environments where <code class=\"varname\">work_mem</code> has already been increased to 40MB or more.</p>"
    min: 1
    max: 1000
    default: 1
    showDefault: 1
    context: user
    
hba_file:
    type: string
    short: "Sets the server's \"hba\" configuration file."
    description: "<p>Specifies the configuration file for host-based authentication (customarily called <span class=\"filename\">pg_hba.conf</span>). This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

hot_standby_feedback:
    type: bool
    short: "Allows feedback from a hot standby to the primary that will avoid query conflicts."
    description: "<p>Specifies whether or not a hot standby will send feedback to the primary or upstream standby about queries currently executing on the standby. This parameter can be used to eliminate query cancels caused by cleanup records, but can cause database bloat on the primary for some workloads. Feedback messages will not be sent more frequently than once per <code class=\"varname\">wal_receiver_status_interval</code>. The default value is <code class=\"literal\">off</code>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>If cascaded replication is in use the feedback is passed upstream until it eventually reaches the primary. Standbys make no other use of feedback they receive other than to pass upstream.</p><p>This setting does not override the behavior of <code class=\"varname\">old_snapshot_threshold</code> on the primary; a snapshot on the standby which exceeds the primary's age threshold can become invalid, resulting in cancellation of transactions on the standby. This is because <code class=\"varname\">old_snapshot_threshold</code> is intended to provide an absolute limit on the time which dead rows can contribute to bloat, which would otherwise be violated because of the configuration of a standby.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

huge_pages:
    type: enum
    short: "Use of huge pages on Linux or Windows."
    description: "<p>Controls whether huge pages are requested for the main shared memory area. Valid values are <code class=\"literal\">try</code> (the default), <code class=\"literal\">on</code>, and <code class=\"literal\">off</code>. With <code class=\"varname\">huge_pages</code> set to <code class=\"literal\">try</code>, the server will try to request huge pages, but fall back to the default if that fails. With <code class=\"literal\">on</code>, failure to request huge pages will prevent the server from starting up. With <code class=\"literal\">off</code>, huge pages will not be requested.</p><p>At present, this setting is supported only on Linux and Windows. The setting is ignored on other systems when set to <code class=\"literal\">try</code>.</p><p>The use of huge pages results in smaller page tables and less CPU time spent on memory management, increasing performance. For more details about using huge pages on Linux, see <span class=\"xref\">linux-huge-pages</span>.</p><p>Huge pages are known as large pages on Windows. To use them, you need to assign the user right Lock Pages in Memory to the Windows user account that runs <span class=\"productname\">PostgreSQL</span>. You can use Windows Group Policy tool (gpedit.msc) to assign the user right Lock Pages in Memory. To start the database server on the command prompt as a standalone process, not as a Windows service, the command prompt must be run as an administrator or User Access Control (UAC) must be disabled. When the UAC is enabled, the normal command prompt revokes the user right Lock Pages in Memory when started.</p><p>Note that this setting only affects the main shared memory area. Operating systems such as Linux, FreeBSD, and Illumos can also use huge pages (also known as <span class=\"quote\">super</span> pages or <span class=\"quote\">large</span> pages) automatically for normal memory allocation, without an explicit request from <span class=\"productname\">PostgreSQL</span>. On Linux, this is called <span class=\"quote\">transparent huge pages</span><span class=\"indexterm\"><span class=\"primary\">transparent huge pages</span></span> (THP). That feature has been known to cause performance degradation with <span class=\"productname\">PostgreSQL</span> for some users on some Linux versions, so its use is currently discouraged (unlike explicit use of <code class=\"varname\">huge_pages</code>).</p>"
    default: try
    showDefault: try
    context: postmaster
    values: "[off, on, try]"
    restart: "Gerektirir"

ident_file:
    type: string
    short: "Sets the server's \"ident\" configuration file."
    description: "<p>Specifies the configuration file for user name mapping (customarily called <span class=\"filename\">pg_ident.conf</span>). This parameter can only be set at server start. See also <span class=\"xref\">auth-username-maps</span>.</p>"
    context: postmaster
    restart: "Gerektirir"

idle_in_transaction_session_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum allowed duration of any idling transaction."
    description: "<p>Terminate any session with an open transaction that has been idle for longer than the specified amount of time. This allows any locks held by that session to be released and the connection slot to be reused; it also allows tuples visible only to this transaction to be vacuumed. See <span class=\"xref\">routine-vacuuming</span> for more details about this.</p><p>If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 ms"
    context: user
    unit: ms

ignore_checksum_failure:
    type: bool
    short: "Continues processing after a checksum failure."
    description: "<p>Only has effect if <span class=\"xref\">app-initdb-data-checksums</span> are enabled.</p><p>Detection of a checksum failure during a read normally causes <span class=\"productname\">PostgreSQL</span> to report an error, aborting the current transaction. Setting <code class=\"varname\">ignore_checksum_failure</code> to on causes the system to ignore the failure (but still report a warning), and continue processing. This behavior may <span class=\"emphasis\">cause crashes, propagate or hide corruption, or other serious problems</span>. However, it may allow you to get past the error and retrieve undamaged tuples that might still be present in the table if the block header is still sane. If the header is corrupt an error will be reported even if this option is enabled. The default setting is <code class=\"literal\">off</code>, and it can only be changed by a superuser.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

ignore_invalid_pages:
    type: bool
    short: "Continues recovery after an invalid pages failure."
    description: "<p>If set to <code class=\"literal\">off</code> (the default), detection of WAL records having references to invalid pages during recovery causes <span class=\"productname\">PostgreSQL</span> to raise a PANIC-level error, aborting the recovery. Setting <code class=\"varname\">ignore_invalid_pages</code> to <code class=\"literal\">on</code> causes the system to ignore invalid page references in WAL records (but still report a warning), and continue the recovery. This behavior may <span class=\"emphasis\">cause crashes, data loss, propagate or hide corruption, or other serious problems</span>. However, it may allow you to get past the PANIC-level error, to finish the recovery, and to cause the server to start up. The parameter can only be set at server start. It only has effect during recovery or in standby mode.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

ignore_system_indexes:
    type: bool
    short: "Disables reading from system indexes."
    description: "<p>Ignore system indexes when reading system tables (but still update the indexes when modifying the tables). This is useful when recovering from damaged system indexes. This parameter cannot be changed after session start.</p>"
    default: "off"
    showDefault: "off"
    context: backend

IntervalStyle:
    type: enum
    short: "Sets the display format for interval values."
    description: "<p>Sets the display format for interval values. The value <code class=\"literal\">sql_standard</code> will produce output matching <span class=\"acronym\">SQL</span> standard interval literals. The value <code class=\"literal\">postgres</code> (which is the default) will produce output matching <span class=\"productname\">PostgreSQL</span> releases prior to 8.4 when the <code class=\"varname\">DateStyle</code> parameter was set to <code class=\"literal\">ISO</code>. The value <code class=\"literal\">postgres_verbose</code> will produce output matching <span class=\"productname\">PostgreSQL</span> releases prior to 8.4 when the <code class=\"varname\">DateStyle</code> parameter was set to non-<code class=\"literal\">ISO</code> output. The value <code class=\"literal\">iso_8601</code> will produce output matching the time interval <span class=\"quote\">format with designators</span> defined in section 4.4.3.2 of ISO 8601.</p><p>The <code class=\"varname\">IntervalStyle</code> parameter also affects the interpretation of ambiguous interval input. See <span class=\"xref\">datatype-interval-input</span> for more information.</p>"
    default: postgres
    showDefault: postgres
    context: user
    values: "[postgres, postgres_verbose, sql_standard, iso_8601]"
jit:
    type: bool
    short: "Allow JIT compilation."
    description: "<p>Determines whether <span class=\"acronym\">JIT</span> compilation may be used by <span class=\"productname\">PostgreSQL</span>, if available (see <span class=\"xref\">jit</span>). The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

jit_above_cost:
    type: real
    short: "Perform JIT compilation if query is more expensive."
    description: "<p>Sets the query cost above which JIT compilation is activated, if enabled (see <span class=\"xref\">jit</span>). Performing <span class=\"acronym\">JIT</span> costs planning time but can accelerate query execution. Setting this to <code class=\"literal\">-1</code> disables JIT compilation. The default is <code class=\"literal\">100000</code>.</p>"
    min: "-1"
    max: "1.79769e+308"
    default: 100000
    showDefault: 100000
    context: user

jit_debugging_support:
    type: bool
    short: "Register JIT compiled function with debugger."
    description: "<p>If LLVM has the required functionality, register generated functions with <span class=\"productname\">GDB</span>. This makes debugging easier. The default setting is <code class=\"literal\">off</code>. This parameter can only be set at server start.</p>"
    default: "off"
    showDefault: "off"
    context: "superu
    ser-backend"
jit_dump_bitcode:
    type: bool
    short: "Write out LLVM bitcode to facilitate JIT debugging."
    description: "<p>Writes the generated <span class=\"productname\">LLVM</span> IR out to the file system, inside <code class=\"varname\">data_directory</code>. This is only useful for working on the internals of the JIT implementation. The default setting is <code class=\"literal\">off</code>. This parameter can only be changed by a superuser.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

jit_expressions:
    type: bool
    short: "Allow JIT compilation of expressions."
    description: "<p>Determines whether expressions are JIT compiled, when JIT compilation is activated (see <span class=\"xref\">jit-decision</span>). The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

jit_inline_above_cost:
    type: real
    short: "Perform JIT inlining if query is more expensive."
    description: "<p>Sets the query cost above which JIT compilation attempts to inline functions and operators. Inlining adds planning time, but can improve execution speed. It is not meaningful to set this to less than <code class=\"varname\">jit_above_cost</code>. Setting this to <code class=\"literal\">-1</code> disables inlining. The default is <code class=\"literal\">500000</code>.</p>"
    min: "-1"
    max: "1.79769e+308"
    default: 500000
    showDefault: 500000
    context: user

jit_optimize_above_cost:
    type: real
    short: "Optimize JITed functions if query is more expensive."
    description: "<p>Sets the query cost above which JIT compilation applies expensive optimizations. Such optimization adds planning time, but can improve execution speed. It is not meaningful to set this to less than <code class=\"varname\">jit_above_cost</code>, and it is unlikely to be beneficial to set it to more than <code class=\"varname\">jit_inline_above_cost</code>. Setting this to <code class=\"literal\">-1</code> disables expensive optimizations. The default is <code class=\"literal\">500000</code>.</p>"
    min: "-1"
    max: "1.79769e+308"
    default: 500000
    showDefault: 500000
    context: user

jit_profiling_support:
    type: bool
    short: "Register JIT compiled function with perf profiler."
    description: "<p>If LLVM has the required functionality, emit the data needed to allow <span class=\"productname\">perf</span> to profile functions generated by JIT. This writes out files to <span class=\"filename\">$HOME/.debug/jit/</span>; the user is responsible for performing cleanup when desired. The default setting is <code class=\"literal\">off</code>. This parameter can only be set at server start.</p>"
    default: "off"
    showDefault: "off"
    context: "su
    peruser-backend"
jit_provider:
    type: string
    short: "JIT provider to use."
    description: "<p>This variable is the name of the JIT provider library to be used (see <span class=\"xref\">jit-pluggable</span>). The default is <code class=\"literal\">llvmjit</code>. This parameter can only be set at server start.</p><p>If set to a non-existent library, <span class=\"acronym\">JIT</span> will not be available, but no error will be raised. This allows JIT support to be installed separately from the main <span class=\"productname\">PostgreSQL</span> package.</p>"
    default: llvmjit
    showDefault: llvmjit
    context: postmaster
    restart: "Gerektirir"

jit_tuple_deforming:
    type: bool
    short: "Allow JIT compilation of tuple deforming."
    description: "<p>Determines whether tuple deforming is JIT compiled, when JIT compilation is activated (see <span class=\"xref\">jit-decision</span>). The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

join_collapse_limit:
    type: integer
    short: "Sets the FROM-list size beyond which JOIN constructs are not flattened."
    description: "<p>The planner will rewrite explicit <code class=\"literal\">JOIN</code> constructs (except <code class=\"literal\">FULL JOIN</code>s) into lists of <code class=\"literal\">FROM</code> items whenever a list of no more than this many items would result. Smaller values reduce planning time but might yield inferior query plans.</p><p>By default, this variable is set the same as <code class=\"varname\">from_collapse_limit</code>, which is appropriate for most uses. Setting it to 1 prevents any reordering of explicit <code class=\"literal\">JOIN</code>s. Thus, the explicit join order specified in the query will be the actual order in which the relations are joined. Because the query planner does not always choose the optimal join order, advanced users can elect to temporarily set this variable to 1, and then specify the join order they desire explicitly. For more information see <span class=\"xref\">explicit-joins</span>.</p><p>Setting this value to <code class=\"varname\">geqo_threshold</code> or more may trigger use of the GEQO planner, resulting in non-optimal plans. See <span class=\"xref\">runtime-config-query-geqo</span>.</p>"
    min: 1
    max: 2147483647
    default: 8
    showDefault: 8
    context: user

krb_caseins_users:
    type: bool
    short: "Sets whether Kerberos and GSSAPI user names should be treated as case-insensitive."
    description: "<p>Sets whether GSSAPI user names should be treated case-insensitively. The default is <code class=\"literal\">off</code> (case sensitive). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

krb_server_keyfile:
    type: string
    short: "Sets the location of the Kerberos server key file."
    description: "<p>Sets the location of the Kerberos server key file. See <span class=\"xref\">gssapi-auth</span> for details. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: "FILE:/etc/postgresql-common/krb5.keytab"
    showDefault: "FILE:/etc/postgresql-common/krb5.keytab"
    context: sighup

lc_messages:
    type: string
    short: "Sets the language in which messages are displayed."
    description: "<p>Sets the language in which messages are displayed. Acceptable values are system-dependent; see <span class=\"xref\">locale</span> for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</p><p>On some systems, this locale category does not exist. Setting this variable will still work, but there will be no effect. Also, there is a chance that no translated messages for the desired language exist. In that case you will continue to see the English messages.</p><p>Only superusers can change this setting, because it affects the messages sent to the server log as well as to the client, and an improper value might obscure the readability of the server logs.</p>"
    context: superuser

lc_monetary:
    type: string
    short: "Sets the locale for formatting monetary amounts."
    description: "<p>Sets the locale to use for formatting monetary amounts, for example with the <span class=\"function\">to_char</span> family of functions. Acceptable values are system-dependent; see <span class=\"xref\">locale</span> for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</p>"
    default: C
    showDefault: C
    context: user

lc_numeric:
    type: string
    short: "Sets the locale for formatting numbers."
    description: "<p>Sets the locale to use for formatting numbers, for example with the <span class=\"function\">to_char</span> family of functions. Acceptable values are system-dependent; see <span class=\"xref\">locale</span> for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</p>"
    default: C
    showDefault: C
    context: user

lc_time:
    type: string
    short: "Sets the locale for formatting date and time values."
    description: "<p>Sets the locale to use for formatting dates and times, for example with the <span class=\"function\">to_char</span> family of functions. Acceptable values are system-dependent; see <span class=\"xref\">locale</span> for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.</p>"
    default: C
    showDefault: C
    context: user

listen_addresses:
    type: string
    short: "Sets the host name or IP address(es) to listen to."
    description: "<p>Specifies the TCP/IP address(es) on which the server is to listen for connections from client applications. The value takes the form of a comma-separated list of host names and/or numeric IP addresses. The special entry <code class=\"literal\">*</code> corresponds to all available IP interfaces. The entry <code class=\"literal\">0.0.0.0</code> allows listening for all IPv4 addresses and <code class=\"literal\">::</code> allows listening for all IPv6 addresses. If the list is empty, the server does not listen on any IP interface at all, in which case only Unix-domain sockets can be used to connect to it. The default value is <span class=\"systemitem\">localhost</span>, which allows only local TCP/IP <span class=\"quote\">loopback</span> connections to be made. While client authentication (<span class=\"xref\">client-authentication</span>) allows fine-grained control over who can access the server, <code class=\"varname\">listen_addresses</code> controls which interfaces accept connection attempts, which can help prevent repeated malicious connection requests on insecure network interfaces. This parameter can only be set at server start.</p>"
    default: localhost
    showDefault: localhost
    context: postmaster
    restart: "Gerektirir"

local_preload_libraries:
    type: string
    short: "Lists unprivileged shared libraries to preload into each backend."
    description: "<p>This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for the <span class=\"xref\">sql-load</span> command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail.</p><p>This option can be set by any user. Because of that, the libraries that can be loaded are restricted to those appearing in the <span class=\"filename\">plugins</span> subdirectory of the installation's standard library directory. (It is the database administrator's responsibility to ensure that only <span class=\"quote\">safe</span> libraries are installed there.) Entries in <code class=\"varname\">local_preload_libraries</code> can specify this directory explicitly, for example <code class=\"literal\">$libdir/plugins/mylib</code>, or just specify the library name &mdash; <code class=\"literal\">mylib</code> would have the same effect as <code class=\"literal\">$libdir/plugins/mylib</code>.</p><p>The intent of this feature is to allow unprivileged users to load debugging or performance-measurement libraries into specific sessions without requiring an explicit <span class=\"command\">LOAD</span> command. To that end, it would be typical to set this parameter using the <span class=\"envar\">PGOPTIONS</span> environment variable on the client or by using <span class=\"command\">ALTER ROLE SET</span>.</p><p>However, unless a module is specifically designed to be used in this way by non-superusers, this is usually not the right setting to use. Look at <code class=\"varname\">session_preload_libraries</code> instead.</p>"
    context: user

lock_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum allowed duration of any wait for a lock."
    description: "<p>Abort any statement that waits longer than the specified amount of time while attempting to acquire a lock on a table, index, row, or other database object. The time limit applies separately to each lock acquisition attempt. The limit applies both to explicit locking requests (such as <span class=\"command\">LOCK TABLE</span>, or <span class=\"command\">SELECT FOR UPDATE</span> without <code class=\"literal\">NOWAIT</code>) and to implicitly-acquired locks. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.</p><p>Unlike <code class=\"varname\">statement_timeout</code>, this timeout can only occur while waiting for locks. Note that if <code class=\"varname\">statement_timeout</code> is nonzero, it is rather pointless to set <code class=\"varname\">lock_timeout</code> to the same or larger value, since the statement timeout would always trigger first. If <code class=\"varname\">log_min_error_statement</code> is set to <code class=\"literal\">ERROR</code> or lower, the statement that timed out will be logged.</p><p>Setting <code class=\"varname\">lock_timeout</code> in <span class=\"filename\">postgresql.conf</span> is not recommended because it would affect all sessions.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 ms"
    context: user
    unit: ms

lo_compat_privileges:
    type: bool
    short: "Enables backward compatibility mode for privilege checks on large objects."
    description: "<p>In <span class=\"productname\">PostgreSQL</span> releases prior to 9.0, large objects did not have access privileges and were, therefore, always readable and writable by all users. Setting this variable to <code class=\"literal\">on</code> disables the new privilege checks, for compatibility with prior releases. The default is <code class=\"literal\">off</code>. Only superusers can change this setting.</p><p>Setting this variable does not disable all security checks related to large objects &mdash; only those for which the default behavior has changed in <span class=\"productname\">PostgreSQL</span> 9.0.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_autovacuum_min_duration:
    type: integer
    subtype: time
    short: "Sets the minimum execution time above which autovacuum actions will be logged."
    description: "<p>Causes each action executed by autovacuum to be logged if it ran for at least the specified amount of time. Setting this to zero logs all autovacuum actions. <code class=\"literal\">-1</code> (the default) disables logging autovacuum actions. If this value is specified without units, it is taken as milliseconds. For example, if you set this to <code class=\"literal\">250ms</code> then all automatic vacuums and analyzes that run 250ms or longer will be logged. In addition, when this parameter is set to any value other than <code class=\"literal\">-1</code>, a message will be logged if an autovacuum action is skipped due to a conflicting lock or a concurrently dropped relation. Enabling this parameter can be helpful in tracking autovacuum activity. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.</p>"
    min: "-1"
    max: 2147483647
    default: "-1"
    showDefault: "-1"
    context: sighup
    unit: ms

log_checkpoints:
    type: bool
    short: "Logs each checkpoint."
    description: "<p>Causes checkpoints and restartpoints to be logged in the server log. Some statistics are included in the log messages, including the number of buffers written and the time spent writing them. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is off.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

log_connections:
    type: bool
    short: "Logs each successful connection."
    description: "<p>Causes each attempted connection to the server to be logged, as well as successful completion of client authentication. Only superusers can change this parameter at session start, and it cannot be changed at all within a session. The default is <code class=\"literal\">off</code>.</p><span class=\"note\"><p>Some client programs, like <span class=\"application\">psql</span>, attempt to connect twice while determining if a password is required, so duplicate <span class=\"quote\">connection received</span> messages do not necessarily indicate a problem.</p></span>"
    default: "off"
    showDefault: "off"
    context: "super
    user-backend"
log_destination:
    type: string
    short: "Sets the destination for server log output."
    description: "<p><span class=\"productname\">PostgreSQL</span> supports several methods for logging server messages, including <span class=\"systemitem\">stderr</span>, <span class=\"systemitem\">csvlog</span> and <span class=\"systemitem\">syslog</span>. On Windows, <span class=\"systemitem\">eventlog</span> is also supported. Set this parameter to a list of desired log destinations separated by commas. The default is to log to <span class=\"systemitem\">stderr</span> only. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>If <span class=\"systemitem\">csvlog</span> is included in <code class=\"varname\">log_destination</code>, log entries are output in <span class=\"quote\">comma separated value</span> (<span class=\"acronym\">CSV</span>) format, which is convenient for loading logs into programs. See <span class=\"xref\">runtime-config-logging-csvlog</span> for details. <code class=\"varname\">logging_collector</code> must be enabled to generate CSV-format log output.</p><p>When either <span class=\"systemitem\">stderr</span> or <span class=\"systemitem\">csvlog</span> are included, the file <span class=\"filename\">current_logfiles</span> is created to record the location of the log file(s) currently in use by the logging collector and the associated logging destination. This provides a convenient way to find the logs currently in use by the instance. Here is an example of this file's content:<span class=\"programlisting\">stderr log/postgresql.logcsvlog log/postgresql.csv</span><span class=\"filename\">current_logfiles</span> is recreated when a new log file is created as an effect of rotation, and when <code class=\"varname\">log_destination</code> is reloaded. It is removed when neither <span class=\"systemitem\">stderr</span> nor <span class=\"systemitem\">csvlog</span> are included in <code class=\"varname\">log_destination</code>, and when the logging collector is disabled.</p><span class=\"note\"><p>On most Unix systems, you will need to alter the configuration of your system's <span class=\"application\">syslog</span> daemon in order to make use of the <span class=\"systemitem\">syslog</span> option for <code class=\"varname\">log_destination</code>. <span class=\"productname\">PostgreSQL</span> can log to <span class=\"application\">syslog</span> facilities <code class=\"literal\">LOCAL0</code> through <code class=\"literal\">LOCAL7</code> (see <code class=\"varname\">syslog_facility</code>), but the default <span class=\"application\">syslog</span> configuration on most platforms will discard all such messages. You will need to add something like:<span class=\"programlisting\">local0.* /var/log/postgresql</span> to the <span class=\"application\">syslog</span> daemon's configuration file to make it work.</p><p>On Windows, when you use the <code class=\"literal\">eventlog</code> option for <code class=\"varname\">log_destination</code>, you should register an event source and its library with the operating system so that the Windows Event Viewer can display event log messages cleanly. See <span class=\"xref\">event-log-registration</span> for details.</p></span>"
    default: stderr
    showDefault: stderr
    context: sighup
log_directory:
    type: string
    short: "Sets the destination directory for log files."
    description: "<p>When <code class=\"varname\">logging_collector</code> is enabled, this parameter determines the directory in which log files will be created. It can be specified as an absolute path, or relative to the cluster data directory. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">log</code>.</p>"
    default: log
    showDefault: log
    context: sighup

log_disconnections:
    type: bool
    short: "Logs end of a session, including duration."
    description: "<p>Causes session terminations to be logged. The log output provides information similar to <code class=\"varname\">log_connections</code>, plus the duration of the session. Only superusers can change this parameter at session start, and it cannot be changed at all within a session. The default is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: "su
    peruser-backend"
log_duration:
    type: bool
    short: "Logs the duration of each completed SQL statement."
    description: "<p>Causes the duration of every completed statement to be logged. The default is <code class=\"literal\">off</code>. Only superusers can change this setting.</p><p>For clients using extended query protocol, durations of the Parse, Bind, and Execute steps are logged independently.</p><span class=\"note\"><p>The difference between enabling <code class=\"varname\">log_duration</code> and setting <code class=\"varname\">log_min_duration_statement</code> to zero is that exceeding <code class=\"varname\">log_min_duration_statement</code> forces the text of the query to be logged, but this option doesn't. Thus, if <code class=\"varname\">log_duration</code> is <code class=\"literal\">on</code> and <code class=\"varname\">log_min_duration_statement</code> has a positive value, all durations are logged but the query text is included only for statements exceeding the threshold. This behavior can be useful for gathering statistics in high-load installations.</p></span>"
    default: "off"
    showDefault: "off"
    context: superuser

log_error_verbosity:
    type: enum
    short: "Sets the verbosity of logged messages."
    description: "<p>Controls the amount of detail written in the server log for each message that is logged. Valid values are <code class=\"literal\">TERSE</code>, <code class=\"literal\">DEFAULT</code>, and <code class=\"literal\">VERBOSE</code>, each adding more fields to displayed messages. <code class=\"literal\">TERSE</code> excludes the logging of <code class=\"literal\">DETAIL</code>, <code class=\"literal\">HINT</code>, <code class=\"literal\">QUERY</code>, and <code class=\"literal\">CONTEXT</code> error information. <code class=\"literal\">VERBOSE</code> output includes the <code class=\"symbol\">SQLSTATE</code> error code (see also <span class=\"xref\">errcodes-appendix</span>) and the source code file name, function name, and line number that generated the error. Only superusers can change this setting.</p>"
    default: default
    showDefault: default
    context: superuser
    values: "[terse, default, verbose]"

log_executor_stats:
    type: bool
    short: "Writes executor performance statistics to the server log."
    description: "<p>For each query, output performance statistics of the respective module to the server log. This is a crude profiling instrument, similar to the Unix <span class=\"function\">getrusage()</span> operating system facility. <code class=\"varname\">log_statement_stats</code> reports total statement statistics, while the others report per-module statistics. <code class=\"varname\">log_statement_stats</code> cannot be enabled together with any of the per-module options. All of these options are disabled by default. Only superusers can change these settings.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_file_mode:
    type: integer
    short: "Sets the file permissions for log files."
    description: "<p>On Unix systems this parameter sets the permissions for log files when <code class=\"varname\">logging_collector</code> is enabled. (On Microsoft Windows this parameter is ignored.) The parameter value is expected to be a numeric mode specified in the format accepted by the <span class=\"function\">chmod</span> and <span class=\"function\">umask</span> system calls. (To use the customary octal format the number must start with a <code class=\"literal\">0</code> (zero).)</p><p>The default permissions are <code class=\"literal\">0600</code>, meaning only the server owner can read or write the log files. The other commonly useful setting is <code class=\"literal\">0640</code>, allowing members of the owner's group to read the files. Note however that to make use of such a setting, you'll need to alter <code class=\"varname\">log_directory</code> to store the files somewhere outside the cluster data directory. In any case, it's unwise to make the log files world-readable, since they might contain sensitive data.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 511
    default: 384
    showDefault: 600
    context: sighup
    octalFormat:
     true
log_filename:
    type: string
    short: "Sets the file name pattern for log files."
    description: "<p>When <code class=\"varname\">logging_collector</code> is enabled, this parameter sets the file names of the created log files. The value is treated as a <span class=\"function\">strftime</span> pattern, so <code class=\"literal\">%</code>-escapes can be used to specify time-varying file names. (Note that if there are any time-zone-dependent <code class=\"literal\">%</code>-escapes, the computation is done in the zone specified by <code class=\"varname\">log_timezone</code>.) The supported <code class=\"literal\">%</code>-escapes are similar to those listed in the Open Group's strftime specification. Note that the system's <span class=\"function\">strftime</span> is not used directly, so platform-specific (nonstandard) extensions do not work. The default is <code class=\"literal\">postgresql-%Y-%m-%d_%H%M%S.log</code>.</p><p>If you specify a file name without escapes, you should plan to use a log rotation utility to avoid eventually filling the entire disk. In releases prior to 8.4, if no <code class=\"literal\">%</code> escapes were present, <span class=\"productname\">PostgreSQL</span> would append the epoch of the new log file's creation time, but this is no longer the case.</p><p>If CSV-format output is enabled in <code class=\"varname\">log_destination</code>, <code class=\"literal\">.csv</code> will be appended to the timestamped log file name to create the file name for CSV-format output. (If <code class=\"varname\">log_filename</code> ends in <code class=\"literal\">.log</code>, the suffix is replaced instead.)</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: "postgresql-%Y-%m-%d_%H%M%S.log"
    showDefault: "postgresql-%Y-%m-%d_%H%M%S.log"
    context: sighup

logging_collector:
    type: bool
    short: "Start a subprocess to capture stderr output and/or csvlogs into log files."
    description: "<p>This parameter enables the <span class=\"firstterm\">logging collector</span>, which is a background process that captures log messages sent to <span class=\"systemitem\">stderr</span> and redirects them into log files. This approach is often more useful than logging to <span class=\"application\">syslog</span>, since some types of messages might not appear in <span class=\"application\">syslog</span> output. (One common example is dynamic-linker failure messages; another is error messages produced by scripts such as <code class=\"varname\">archive_command</code>.) This parameter can only be set at server start.</p><span class=\"note\"><p>It is possible to log to <span class=\"systemitem\">stderr</span> without using the logging collector; the log messages will just go to wherever the server's <span class=\"systemitem\">stderr</span> is directed. However, that method is only suitable for low log volumes, since it provides no convenient way to rotate log files. Also, on some platforms not using the logging collector can result in lost or garbled log output, because multiple processes writing concurrently to the same log file can overwrite each other's output.</p></span><span class=\"note\"><p>The logging collector is designed to never lose messages. This means that in case of extremely high load, server processes could be blocked while trying to send additional log messages when the collector has fallen behind. In contrast, <span class=\"application\">syslog</span> prefers to drop messages if it cannot write them, which means it may fail to log some messages in such cases but it will not block the rest of the system.</p></span>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

log_hostname:
    type: bool
    short: "Logs the host name in the connection logs."
    description: "<p>By default, connection log messages only show the IP address of the connecting host. Turning this parameter on causes logging of the host name as well. Note that depending on your host name resolution setup this might impose a non-negligible performance penalty. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

logical_decoding_work_mem:
    type: integer
    subtype: memory
    short: "Sets the maximum memory to be used for logical decoding."
    description: "<p>Specifies the maximum amount of memory to be used by logical decoding, before some of the decoded changes are written to local disk. This limits the amount of memory used by logical streaming replication connections. It defaults to 64 megabytes (<code class=\"literal\">64MB</code>). Since each replication connection only uses a single buffer of this size, and an installation normally doesn't have many such connections concurrently (as limited by <code class=\"varname\">max_wal_senders</code>), it's safe to set this value significantly higher than <code class=\"varname\">work_mem</code>, reducing the amount of decoded changes written to disk.</p>"
    min: "64 (64kB)"
    max: "2147483647 (2147483647 kB)"
    default: 65536
    showDefault: "65536 (64MB)"
    context: user
    unit: kB

log_line_prefix:
    type: string
    short: "Controls information prefixed to each log line."
    description: "<p>This is a <span class=\"function\">printf</span>-style string that is output at the beginning of each log line. <code class=\"literal\">%</code> characters begin <span class=\"quote\">escape sequences</span> that are replaced with status information as outlined below. Unrecognized escapes are ignored. Other characters are copied straight to the log line. Some escapes are only recognized by session processes, and will be treated as empty by background processes such as the main server process. Status information may be aligned either left or right by specifying a numeric literal after the % and before the option. A negative value will cause the status information to be padded on the right with spaces to give it a minimum width, whereas a positive value will pad on the left. Padding can be useful to aid human readability in log files.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">'%m [%p] '</code> which logs a time stamp and the process ID.</p><span class=\"informaltable\"><span class=\"tgroup\"><span class=\"thead\"><span class=\"row\"><span class=\"entry\">Escape</span><span class=\"entry\">Effect</span><span class=\"entry\">Session only</span></span></span><span class=\"tbody\"><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%a</code></span><span class=\"entry\">Application name</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%u</code></span><span class=\"entry\">User name</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%d</code></span><span class=\"entry\">Database name</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%r</code></span><span class=\"entry\">Remote host name or IP address, and remote port</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%h</code></span><span class=\"entry\">Remote host name or IP address</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%b</code></span><span class=\"entry\">Backend type</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%p</code></span><span class=\"entry\">Process ID</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%t</code></span><span class=\"entry\">Time stamp without milliseconds</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%m</code></span><span class=\"entry\">Time stamp with milliseconds</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%n</code></span><span class=\"entry\">Time stamp with milliseconds (as a Unix epoch)</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%i</code></span><span class=\"entry\">Command tag: type of session's current command</span><span class=\"entry\">yes</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%e</code></span><span class=\"entry\">SQLSTATE error code</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%c</code></span><span class=\"entry\">Session ID: see below</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%l</code></span><span class=\"entry\">Number of the log line for each session or process, starting at 1</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%s</code></span><span class=\"entry\">Process start time stamp</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%v</code></span><span class=\"entry\">Virtual transaction ID (backendID/localXID)</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%x</code></span><span class=\"entry\">Transaction ID (0 if none is assigned)</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%q</code></span><span class=\"entry\">Produces no output, but tells non-session processes to stop at this point in the string; ignored by session processes</span><span class=\"entry\">no</span></span><span class=\"row\"><span class=\"entry\"><code class=\"literal\">%%</code></span><span class=\"entry\">Literal <code class=\"literal\">%</code></span><span class=\"entry\">no</span></span></span></span></span><p>The backend type corresponds to the column <span class=\"structfield\">backend_type</span> in the view <span class=\"link\"><span class=\"structname\">pg_stat_activity</span></span>, but additional types can appear in the log that don't show in that view.</p><p>The <code class=\"literal\">%c</code> escape prints a quasi-unique session identifier, consisting of two 4-byte hexadecimal numbers (without leading zeros) separated by a dot. The numbers are the process start time and the process ID, so <code class=\"literal\">%c</code> can also be used as a space saving way of printing those items. For example, to generate the session identifier from <code class=\"literal\">pg_stat_activity</code>, use this query:<span class=\"programlisting\">SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' || to_hex(pid)FROM pg_stat_activity;</span></p><span class=\"tip\"><p>If you set a nonempty value for <code class=\"varname\">log_line_prefix</code>, you should usually make its last character be a space, to provide visual separation from the rest of the log line. A punctuation character can be used too.</p></span><span class=\"tip\"><p><span class=\"application\">Syslog</span> produces its own time stamp and process ID information, so you probably do not want to include those escapes if you are logging to <span class=\"application\">syslog</span>.</p></span><span class=\"tip\"><p>The <code class=\"literal\">%q</code> escape is useful when including information that is only available in session (backend) context like user or database name. For example:<span class=\"programlisting\">log_line_prefix = '%m [%p] %q%u@%d/%a '</span></p></span>"
    default: "%m [%p] "
    showDefault: "%m [%p] "
    context: sighup

log_lock_waits:
    type: bool
    short: "Logs long lock waits."
    description: "<p>Controls whether a log message is produced when a session waits longer than <code class=\"varname\">deadlock_timeout</code> to acquire a lock. This is useful in determining if lock waits are causing poor performance. The default is <code class=\"literal\">off</code>. Only superusers can change this setting.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_min_duration_sample:
    type: integer
    subtype: time
    short: "Sets the minimum execution time above which a sample of statements will be logged. Sampling is determined by log_statement_sample_rate."
    description: "<p>Allows sampling the duration of completed statements that ran for at least the specified amount of time. This produces the same kind of log entries as <code class=\"varname\">log_min_duration_statement</code>, but only for a subset of the executed statements, with sample rate controlled by <span class=\"xref\">guc-log-statement-sample-rate</span>. For example, if you set it to <code class=\"literal\">100ms</code> then all SQL statements that run 100ms or longer will be considered for sampling. Enabling this parameter can be helpful when the traffic is too high to log all queries. If this value is specified without units, it is taken as milliseconds. Setting this to zero samples all statement durations. <code class=\"literal\">-1</code> (the default) disables sampling statement durations. Only superusers can change this setting.</p><p>This setting has lower priority than <code class=\"varname\">log_min_duration_statement</code>, meaning that statements with durations exceeding <code class=\"varname\">log_min_duration_statement</code> are not subject to sampling and are always logged.</p><p>Other notes for <code class=\"varname\">log_min_duration_statement</code> apply also to this setting.</p>"
    min: "-1"
    max: 2147483647
    default: "-1"
    showDefault: "-1"
    context: superuser
    unit: ms

log_rotation_age:
    type: integer
    subtype: time
    short: "Automatic log file rotation will occur after N minutes."
    description: "<p>When <code class=\"varname\">logging_collector</code> is enabled, this parameter determines the maximum amount of time to use an individual log file, after which a new log file will be created. If this value is specified without units, it is taken as minutes. The default is 24 hours. Set to zero to disable time-based creation of new log files. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 35791394
    default: 1440
    showDefault: "1 d"
    context: sighup
    unit: min

log_min_duration_statement:
    type: integer
    subtype: time
    short: "Sets the minimum execution time above which all statements will be logged."
    description: "<p>Causes the duration of each completed statement to be logged if the statement ran for at least the specified amount of time. For example, if you set it to <code class=\"literal\">250ms</code> then all SQL statements that run 250ms or longer will be logged. Enabling this parameter can be helpful in tracking down unoptimized queries in your applications. If this value is specified without units, it is taken as milliseconds. Setting this to zero prints all statement durations. <code class=\"literal\">-1</code> (the default) disables logging statement durations. Only superusers can change this setting.</p><p>This overrides <span class=\"xref\">guc-log-min-duration-sample</span>, meaning that queries with duration exceeding this setting are not subject to sampling and are always logged.</p><p>For clients using extended query protocol, durations of the Parse, Bind, and Execute steps are logged independently.</p><span class=\"note\"><p>When using this option together with <code class=\"varname\">log_statement</code>, the text of statements that are logged because of <code class=\"varname\">log_statement</code> will not be repeated in the duration log message. If you are not using <span class=\"application\">syslog</span>, it is recommended that you log the PID or session ID using <code class=\"varname\">log_line_prefix</code> so that you can link the statement message to the later duration message using the process ID or session ID.</p></span>"
    min: "-1"
    max: 2147483647
    default: "-1"
    showDefault: "-1"
    context: superuser
    unit: ms

log_min_error_statement:
    type: enum
    short: "Causes all statements generating error at or above this level to be logged."
    description: "<p>Controls which SQL statements that cause an error condition are recorded in the server log. The current SQL statement is included in the log entry for any message of the specified <span class=\"link\">severity</span> or higher. Valid values are <code class=\"literal\">DEBUG5</code>, <code class=\"literal\">DEBUG4</code>, <code class=\"literal\">DEBUG3</code>, <code class=\"literal\">DEBUG2</code>, <code class=\"literal\">DEBUG1</code>, <code class=\"literal\">INFO</code>, <code class=\"literal\">NOTICE</code>, <code class=\"literal\">WARNING</code>, <code class=\"literal\">ERROR</code>, <code class=\"literal\">LOG</code>, <code class=\"literal\">FATAL</code>, and <code class=\"literal\">PANIC</code>. The default is <code class=\"literal\">ERROR</code>, which means statements causing errors, log messages, fatal errors, or panics will be logged. To effectively turn off logging of failing statements, set this parameter to <code class=\"literal\">PANIC</code>. Only superusers can change this setting.</p>"
    default: error
    showDefault: error
    context: superuser
    values: "[debug5, debug4, debug3, debug2, debug1, info, notice, warning, error, log, fatal, panic]"

log_min_messages:
    type: enum
    short: "Sets the message levels that are logged."
    description: "<p>Controls which <span class=\"link\">message levels</span> are written to the server log. Valid values are <code class=\"literal\">DEBUG5</code>, <code class=\"literal\">DEBUG4</code>, <code class=\"literal\">DEBUG3</code>, <code class=\"literal\">DEBUG2</code>, <code class=\"literal\">DEBUG1</code>, <code class=\"literal\">INFO</code>, <code class=\"literal\">NOTICE</code>, <code class=\"literal\">WARNING</code>, <code class=\"literal\">ERROR</code>, <code class=\"literal\">LOG</code>, <code class=\"literal\">FATAL</code>, and <code class=\"literal\">PANIC</code>. Each level includes all the levels that follow it. The later the level, the fewer messages are sent to the log. The default is <code class=\"literal\">WARNING</code>. Note that <code class=\"literal\">LOG</code> has a different rank here than in <code class=\"varname\">client_min_messages</code>. Only superusers can change this setting.</p>"
    default: warning
    showDefault: warning
    context: superuser
    values: "[debug5, debug4, debug3, debug2, debug1, info, notice, warning, error, log, fatal, panic]"
log_parameter_max_length:
    type: integer
    subtype: memory
    short: "When logging statements, limit logged parameter values to first N bytes."
    description: "<p>If greater than zero, each bind parameter value logged with a non-error statement-logging message is trimmed to this many bytes. Zero disables logging of bind parameters for non-error statement logs. <code class=\"literal\">-1</code> (the default) allows bind parameters to be logged in full. If this value is specified without units, it is taken as bytes. Only superusers can change this setting.</p><p>This setting only affects log messages printed as a result of <code class=\"varname\">log_statement</code>, <code class=\"varname\">log_duration</code>, and related settings. Non-zero values of this setting add some overhead, particularly if parameters are sent in binary form, since then conversion to text is required.</p>"
    min: "-1"
    max: 1073741823
    default: "-1"
    showDefault: "-1"
    context: superuser
    unit: B

log_parameter_max_length_on_error:
    type: integer
    subtype: memory
    short: "When reporting an error, limit logged parameter values to first N bytes."
    description: "<p>If greater than zero, each bind parameter value reported in error messages is trimmed to this many bytes. Zero (the default) disables including bind parameters in error messages. <code class=\"literal\">-1</code> allows bind parameters to be printed in full. If this value is specified without units, it is taken as bytes.</p><p>Non-zero values of this setting add overhead, as <span class=\"productname\">PostgreSQL</span> will need to store textual representations of parameter values in memory at the start of each statement, whether or not an error eventually occurs. The overhead is greater when bind parameters are sent in binary form than when they are sent as text, since the former case requires data conversion while the latter only requires copying the string.</p>"
    min: "-1"
    max: 1073741823
    default: 0
    showDefault: "0 B"
    context: user
    unit: B

log_parser_stats:
    type: bool
    short: "Writes parser performance statistics to the server log."
    description: "<p>For each query, output performance statistics of the respective module to the server log. This is a crude profiling instrument, similar to the Unix <span class=\"function\">getrusage()</span> operating system facility. <code class=\"varname\">log_statement_stats</code> reports total statement statistics, while the others report per-module statistics. <code class=\"varname\">log_statement_stats</code> cannot be enabled together with any of the per-module options. All of these options are disabled by default. Only superusers can change these settings.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_planner_stats:
    type: bool
    short: "Writes planner performance statistics to the server log."
    description: "<p>For each query, output performance statistics of the respective module to the server log. This is a crude profiling instrument, similar to the Unix <span class=\"function\">getrusage()</span> operating system facility. <code class=\"varname\">log_statement_stats</code> reports total statement statistics, while the others report per-module statistics. <code class=\"varname\">log_statement_stats</code> cannot be enabled together with any of the per-module options. All of these options are disabled by default. Only superusers can change these settings.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_replication_commands:
    type: bool
    short: "Logs each replication command."
    description: "<p>Causes each replication command to be logged in the server log. See <span class=\"xref\">protocol-replication</span> for more information about replication command. The default value is <code class=\"literal\">off</code>. Only superusers can change this setting.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_rotation_size:
    type: integer
    subtype: memory
    short: "Automatic log file rotation will occur after N kilobytes."
    description: "<p>When <code class=\"varname\">logging_collector</code> is enabled, this parameter determines the maximum size of an individual log file. After this amount of data has been emitted into a log file, a new log file will be created. If this value is specified without units, it is taken as kilobytes. The default is 10 megabytes. Set to zero to disable size-based creation of new log files. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2097151
    default: 10240
    showDefault: "10 MB"
    context: sighup
    unit: kB

log_statement:
    type: enum
    short: "Sets the type of statements logged."
    description: "<p>Controls which SQL statements are logged. Valid values are <code class=\"literal\">none</code> (off), <code class=\"literal\">ddl</code>, <code class=\"literal\">mod</code>, and <code class=\"literal\">all</code> (all statements). <code class=\"literal\">ddl</code> logs all data definition statements, such as <span class=\"command\">CREATE</span>, <span class=\"command\">ALTER</span>, and <span class=\"command\">DROP</span> statements. <code class=\"literal\">mod</code> logs all <code class=\"literal\">ddl</code> statements, plus data-modifying statements such as <span class=\"command\">INSERT</span>, <span class=\"command\">UPDATE</span>, <span class=\"command\">DELETE</span>, <span class=\"command\">TRUNCATE</span>, and <span class=\"command\">COPY FROM</span>. <span class=\"command\">PREPARE</span>, <span class=\"command\">EXECUTE</span>, and <span class=\"command\">EXPLAIN ANALYZE</span> statements are also logged if their contained command is of an appropriate type. For clients using extended query protocol, logging occurs when an Execute message is received, and values of the Bind parameters are included (with any embedded single-quote marks doubled).</p><p>The default is <code class=\"literal\">none</code>. Only superusers can change this setting.</p><span class=\"note\"><p>Statements that contain simple syntax errors are not logged even by the <code class=\"varname\">log_statement</code> = <code class=\"literal\">all</code> setting, because the log message is emitted only after basic parsing has been done to determine the statement type. In the case of extended query protocol, this setting likewise does not log statements that fail before the Execute phase (i.e., during parse analysis or planning). Set <code class=\"varname\">log_min_error_statement</code> to <code class=\"literal\">ERROR</code> (or lower) to log such statements.</p></span>"
    default: none
    showDefault: none
    context: superuser
    values: "[none, ddl, mod, all]"

log_statement_sample_rate:
    type: real
    short: "Fraction of statements exceeding log_min_duration_sample to be logged."
    description: "<p>Determines the fraction of statements with duration exceeding <code class=\"varname\">log_min_duration_sample</code> that will be logged. Sampling is stochastic, for example <code class=\"literal\">0.5</code> means there is statistically one chance in two that any given statement will be logged. The default is <code class=\"literal\">1.0</code>, meaning to log all sampled statements. Setting this to zero disables sampled statement-duration logging, the same as setting <code class=\"varname\">log_min_duration_sample</code> to <code class=\"literal\">-1</code>. Only superusers can change this setting.</p>"
    min: 0
    max: 1
    default: 1
    showDefault: 1
    context: superuser

log_statement_stats:
    type: bool
    short: "Writes cumulative performance statistics to the server log."
    description: "<p>For each query, output performance statistics of the respective module to the server log. This is a crude profiling instrument, similar to the Unix <span class=\"function\">getrusage()</span> operating system facility. <code class=\"varname\">log_statement_stats</code> reports total statement statistics, while the others report per-module statistics. <code class=\"varname\">log_statement_stats</code> cannot be enabled together with any of the per-module options. All of these options are disabled by default. Only superusers can change these settings.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

log_temp_files:
    type: integer
    subtype: memory
    short: "Log the use of temporary files larger than this number of kilobytes."
    description: "<p>Controls logging of temporary file names and sizes. Temporary files can be created for sorts, hashes, and temporary query results. If enabled by this setting, a log entry is emitted for each temporary file when it is deleted. A value of zero logs all temporary file information, while positive values log only files whose size is greater than or equal to the specified amount of data. If this value is specified without units, it is taken as kilobytes. The default setting is -1, which disables such logging. Only superusers can change this setting.</p>"
    min: "-1"
    max: 2147483647
    default: "-1"
    showDefault: "-1"
    context: superuser
    unit: kB

log_timezone:
    type: string
    short: "Sets the time zone to use in log messages."
    description: "<p>Sets the time zone used for timestamps written in the server log. Unlike <code class=\"varname\">TimeZone</code>, this value is cluster-wide, so that all sessions will report timestamps consistently. The built-in default is <code class=\"literal\">GMT</code>, but that is typically overridden in <span class=\"filename\">postgresql.conf</span>; <span class=\"application\">initdb</span> will install a setting there corresponding to its system environment. See <span class=\"xref\">datatype-timezones</span> for more information. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: GMT
    showDefault: GMT
    context: sighup

log_transaction_sample_rate:
    type: real
    short: "Set the fraction of transactions to log for new transactions."
    description: "<p>Sets the fraction of transactions whose statements are all logged, in addition to statements logged for other reasons. It applies to each new transaction regardless of its statements' durations. Sampling is stochastic, for example <code class=\"literal\">0.1</code> means there is statistically one chance in ten that any given transaction will be logged. <code class=\"varname\">log_transaction_sample_rate</code> can be helpful to construct a sample of transactions. The default is <code class=\"literal\">0</code>, meaning not to log statements from any additional transactions. Setting this to <code class=\"literal\">1</code> logs all statements of all transactions. Only superusers can change this setting.</p><span class=\"note\"><p>Like all statement-logging options, this option can add significant overhead.</p></span>"
    min: 0
    max: 1
    default: 0
    showDefault: 0
    context: superuser

log_truncate_on_rotation:
    type: bool
    short: "Truncate existing log files of same name during log rotation."
    description: "<p>When <code class=\"varname\">logging_collector</code> is enabled, this parameter will cause <span class=\"productname\">PostgreSQL</span> to truncate (overwrite), rather than append to, any existing log file of the same name. However, truncation will occur only when a new file is being opened due to time-based rotation, not during server startup or size-based rotation. When off, pre-existing files will be appended to in all cases. For example, using this setting in combination with a <code class=\"varname\">log_filename</code> like <code class=\"literal\">postgresql-%H.log</code> would result in generating twenty-four hourly log files and then cyclically overwriting them. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>Example: To keep 7 days of logs, one log file per day named <code class=\"literal\">server_log.Mon</code>, <code class=\"literal\">server_log.Tue</code>, etc, and automatically overwrite last week's log with this week's log, set <code class=\"varname\">log_filename</code> to <code class=\"literal\">server_log.%a</code>, <code class=\"varname\">log_truncate_on_rotation</code> to <code class=\"literal\">on</code>, and <code class=\"varname\">log_rotation_age</code> to <code class=\"literal\">1440</code>.</p><p>Example: To keep 24 hours of logs, one log file per hour, but also rotate sooner if the log file size exceeds 1GB, set <code class=\"varname\">log_filename</code> to <code class=\"literal\">server_log.%H%M</code>, <code class=\"varname\">log_truncate_on_rotation</code> to <code class=\"literal\">on</code>, <code class=\"varname\">log_rotation_age</code> to <code class=\"literal\">60</code>, and <code class=\"varname\">log_rotation_size</code> to <code class=\"literal\">1000000</code>. Including <code class=\"literal\">%M</code> in <code class=\"varname\">log_filename</code> allows any size-driven rotations that might occur to select a file name different from the hour's initial file name.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

maintenance_io_concurrency:
    type: integer
    short: "A variant of effective_io_concurrency that is used for maintenance work."
    description: "<p>Similar to <code class=\"varname\">effective_io_concurrency</code>, but used for maintenance work that is done on behalf of many client sessions.</p><p>The default is 10 on supported systems, otherwise 0. This value can be overridden for tables in a particular tablespace by setting the tablespace parameter of the same name (see <span class=\"xref\">sql-altertablespace</span>).</p>"
    min: 0
    max: 1000
    default: 10
    showDefault: 10
    context: user

maintenance_work_mem:
    type: integer
    subtype: memory
    short: "Sets the maximum memory to be used for maintenance operations."
    description: "<p>Specifies the maximum amount of memory to be used by maintenance operations, such as <span class=\"command\">VACUUM</span>, <span class=\"command\">CREATE INDEX</span>, and <span class=\"command\">ALTER TABLE ADD FOREIGN KEY</span>. If this value is specified without units, it is taken as kilobytes. It defaults to 64 megabytes (<code class=\"literal\">64MB</code>). Since only one of these operations can be executed at a time by a database session, and an installation normally doesn't have many of them running concurrently, it's safe to set this value significantly larger than <code class=\"varname\">work_mem</code>. Larger settings might improve performance for vacuuming and for restoring database dumps.</p><p>Note that when autovacuum runs, up to <code class=\"varname\">autovacuum_max_workers</code> times this memory may be allocated, so be careful not to set the default value too high. It may be useful to control for this by separately setting <code class=\"varname\">autovacuum_work_mem</code>.</p>"
    min: "1024 (1MB)"
    max: "2147483647 (2147483647kB)"
    default: 65536
    showDefault: "65536 (64MB)"
    context: user
    unit: kB

max_connections:
    type: integer
    short: "Sets the maximum number of concurrent connections."
    description: "<p>Determines the maximum number of concurrent connections to the database server. The default is typically 100 connections, but might be less if your kernel settings will not support it (as determined during <span class=\"application\">initdb</span>). This parameter can only be set at server start.</p><p>When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.</p>"
    min: 1
    max: 262143
    default: 100
    showDefault: 100
    context: postmaster
    restart: "Gerektirir"

max_files_per_process:
    type: integer
    short: "Sets the maximum number of simultaneously open files for each server process."
    description: "<p>Sets the maximum number of simultaneously open files allowed to each server subprocess. The default is one thousand files. If the kernel is enforcing a safe per-process limit, you don't need to worry about this setting. But on some platforms (notably, most BSD systems), the kernel will allow individual processes to open many more files than the system can actually support if many processes all try to open that many files. If you find yourself seeing <span class=\"quote\">Too many open files</span> failures, try reducing this setting. This parameter can only be set at server start.</p>"
    min: 64
    max: 2147483647
    default: 1000
    showDefault: 1000
    context: postmaster
    restart: "Gerektirir"

max_locks_per_transaction:
    type: integer
    short: "Sets the maximum number of locks per transaction."
    description: "<p>The shared lock table tracks locks on <code class=\"varname\">max_locks_per_transaction</code> * (<code class=\"varname\">max_connections</code> + <code class=\"varname\">max_prepared_transactions</code>) objects (e.g., tables); hence, no more than this many distinct objects can be locked at any one time. This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. This is <span class=\"emphasis\">not</span> the number of rows that can be locked; that value is unlimited. The default, 64, has historically proven sufficient, but you might need to raise this value if you have queries that touch many different tables in a single transaction, e.g., query of a parent table with many children. This parameter can only be set at server start.</p><p>When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.</p>"
    min: 10
    max: 2147483647
    default: 64
    showDefault: 64
    context: postmaster
    restart: "Gerektirir"

max_logical_replication_workers:
    type: integer
    short: "Maximum number of logical replication worker processes."
    description: "<p>Specifies maximum number of logical replication workers. This includes both apply workers and table synchronization workers.</p><p>Logical replication workers are taken from the pool defined by <code class=\"varname\">max_worker_processes</code>.</p><p>The default value is 4.</p>"
    min: 0
    max: 262143
    default: 4
    showDefault: 4
    context: postmaster
    restart: "Gerektirir"

max_parallel_maintenance_workers:
    type: integer
    short: "Sets the maximum number of parallel processes per maintenance operation."
    description: "<p>Sets the maximum number of parallel workers that can be started by a single utility command. Currently, the parallel utility commands that support the use of parallel workers are <span class=\"command\">CREATE INDEX</span> only when building a B-tree index, and <span class=\"command\">VACUUM</span> without <code class=\"literal\">FULL</code> option. Parallel workers are taken from the pool of processes established by <code class=\"varname\">max_worker_processes</code>, limited by <code class=\"varname\">max_parallel_workers</code>. Note that the requested number of workers may not actually be available at run time. If this occurs, the utility operation will run with fewer workers than expected. The default value is 2. Setting this value to 0 disables the use of parallel workers by utility commands.</p><p>Note that parallel utility commands should not consume substantially more memory than equivalent non-parallel operations. This strategy differs from that of parallel query, where resource limits generally apply per worker process. Parallel utility commands treat the resource limit <code class=\"varname\">maintenance_work_mem</code> as a limit to be applied to the entire utility command, regardless of the number of parallel worker processes. However, parallel utility commands may still consume substantially more CPU resources and I/O bandwidth.</p>"
    min: 0
    max: 1024
    default: 2
    showDefault: 2
    context: user

max_parallel_workers:
    type: integer
    short: "Sets the maximum number of parallel workers that can be active at one time."
    description: "<p>Sets the maximum number of workers that the system can support for parallel operations. The default value is 8. When increasing or decreasing this value, consider also adjusting <code class=\"varname\">max_parallel_maintenance_workers</code> and <code class=\"varname\">max_parallel_workers_per_gather</code>. Also, note that a setting for this value which is higher than <code class=\"varname\">max_worker_processes</code> will have no effect, since parallel workers are taken from the pool of worker processes established by that setting.</p>"
    min: 0
    max: 1024
    default: 8
    showDefault: 8
    context: user
min_wal_size:
    type: integer
    subtype: memory
    short: "Sets the minimum size to shrink the WAL to."
    description: "<p>As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. If this value is specified without units, it is taken as megabytes. The default is 80 MB. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 2
    max: 2147483647
    default: 80
    showDefault: "80 MB"
    context: sighup
    unit: MB

max_parallel_workers_per_gather:
    type: integer
    short: "Sets the maximum number of parallel processes per executor node."
    description: "<p>Sets the maximum number of workers that can be started by a single <code class=\"literal\">Gather</code> or <code class=\"literal\">Gather Merge</code> node. Parallel workers are taken from the pool of processes established by <code class=\"varname\">max_worker_processes</code>, limited by <code class=\"varname\">max_parallel_workers</code>. Note that the requested number of workers may not actually be available at run time. If this occurs, the plan will run with fewer workers than expected, which may be inefficient. The default value is 2. Setting this value to 0 disables parallel query execution.</p><p>Note that parallel queries may consume very substantially more resources than non-parallel queries, because each worker process is a completely separate process which has roughly the same impact on the system as an additional user session. This should be taken into account when choosing a value for this setting, as well as when configuring other settings that control resource utilization, such as <code class=\"varname\">work_mem</code>. Resource limits such as <code class=\"varname\">work_mem</code> are applied individually to each worker, which means the total utilization may be much higher across all processes than it would normally be for any single process. For example, a parallel query using 4 workers may use up to 5 times as much CPU time, memory, I/O bandwidth, and so forth as a query which uses no workers at all.</p><p>For more information on parallel query, see <span class=\"xref\">parallel-query</span>.</p>"
    min: 0
    max: 1024
    default: 2
    showDefault: 2
    context: user

max_pred_locks_per_page:
    type: integer
    short: "Sets the maximum number of predicate-locked tuples per page."
    description: "<p>This controls how many rows on a single page can be predicate-locked before the lock is promoted to covering the whole page. The default is 2. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 2
    showDefault: 2
    context: sighup

max_pred_locks_per_relation:
    type: integer
    short: "Sets the maximum number of predicate-locked pages and tuples per relation."
    description: "<p>This controls how many pages or tuples of a single relation can be predicate-locked before the lock is promoted to covering the whole relation. Values greater than or equal to zero mean an absolute limit, while negative values mean <code class=\"varname\">max_pred_locks_per_transaction</code> divided by the absolute value of this setting. The default is -2, which keeps the behavior from previous versions of <span class=\"productname\">PostgreSQL</span>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: "-2147483648"
    max: 2147483647
    default: "-2"
    showDefault: "-2"
    context: sighup

max_pred_locks_per_transaction:
    type: integer
    short: "Sets the maximum number of predicate locks per transaction."
    description: "<p>The shared predicate lock table tracks locks on <code class=\"varname\">max_pred_locks_per_transaction</code> * (<code class=\"varname\">max_connections</code> + <code class=\"varname\">max_prepared_transactions</code>) objects (e.g., tables); hence, no more than this many distinct objects can be locked at any one time. This parameter controls the average number of object locks allocated for each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. This is <span class=\"emphasis\">not</span> the number of rows that can be locked; that value is unlimited. The default, 64, has generally been sufficient in testing, but you might need to raise this value if you have clients that touch many different tables in a single serializable transaction. This parameter can only be set at server start.</p>"
    min: 10
    max: 2147483647
    default: 64
    showDefault: 64
    context: postmaster
    restart: "Gerektirir"

max_prepared_transactions:
    type: integer
    short: "Sets the maximum number of simultaneously prepared transactions."
    description: "<p>Sets the maximum number of transactions that can be in the <span class=\"quote\">prepared</span> state simultaneously (see <span class=\"xref\">sql-prepare-transaction</span>). Setting this parameter to zero (which is the default) disables the prepared-transaction feature. This parameter can only be set at server start.</p><p>If you are not planning to use prepared transactions, this parameter should be set to zero to prevent accidental creation of prepared transactions. If you are using prepared transactions, you will probably want <code class=\"varname\">max_prepared_transactions</code> to be at least as large as <code class=\"varname\">max_connections</code>, so that every session can have a prepared transaction pending.</p><p>When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.</p>"
    min: 0
    max: 262143
    default: 0
    showDefault: 0
    context: postmaster
    restart: "Gerektirir"

max_replication_slots:
    type: integer
    short: "Sets the maximum number of simultaneously defined replication slots."
    description: "<p>Specifies the maximum number of replication slots (see <span class=\"xref\">streaming-replication-slots</span>) that the server can support. The default is 10. This parameter can only be set at server start. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting. Also, <code class=\"varname\">wal_level</code> must be set to <code class=\"literal\">replica</code> or higher to allow replication slots to be used.</p>"
    min: 0
    max: 262143
    default: 10
    showDefault: 10
    context: postmaster
    restart: "Gerektirir"

max_slot_wal_keep_size:
    type: integer
    subtype: memory
    short: "Sets the maximum WAL size that can be reserved by replication slots."
    description: "<p>Specify the maximum size of WAL files that <span class=\"link\">replication slots</span> are allowed to retain in the <span class=\"filename\">pg_wal</span> directory at checkpoint time. If <code class=\"varname\">max_slot_wal_keep_size</code> is -1 (the default), replication slots may retain an unlimited amount of WAL files. Otherwise, if restart_lsn of a replication slot falls behind the current LSN by more than the given size, the standby using the slot may no longer be able to continue replication due to removal of required WAL files. You can see the WAL availability of replication slots in <span class=\"link\">pg_replication_slots</span>.</p>"
    min: "-1"
    max: 2147483647
    default: "-1"
    showDefault: "-1"
    context: sighup
    unit: MB

max_stack_depth:
    type: integer
    subtype: memory
    short: "Sets the maximum stack depth, in kilobytes."
    description: "<p>Specifies the maximum safe depth of the server's execution stack. The ideal setting for this parameter is the actual stack size limit enforced by the kernel (as set by <code class=\"literal\">ulimit -s</code> or local equivalent), less a safety margin of a megabyte or so. The safety margin is needed because the stack depth is not checked in every routine in the server, but only in key potentially-recursive routines. If this value is specified without units, it is taken as kilobytes. The default setting is two megabytes (<code class=\"literal\">2MB</code>), which is conservatively small and unlikely to risk crashes. However, it might be too small to allow execution of complex functions. Only superusers can change this setting.</p><p>Setting <code class=\"varname\">max_stack_depth</code> higher than the actual kernel limit will mean that a runaway recursive function can crash an individual backend process. On platforms where <span class=\"productname\">PostgreSQL</span> can determine the kernel limit, the server will not allow this variable to be set to an unsafe value. However, not all platforms provide the information, so caution is recommended in selecting a value.</p>"
    min: "100 (100kB)"
    max: "2147483647 (2147483647 kB)"
    default: 100
    showDefault: "100 (100kB)"
    context: superuser
    unit: kB

max_standby_archive_delay:
    type: integer
    subtype: time
    short: "Sets the maximum delay before canceling queries when a hot standby server is processing archived WAL data."
    description: "<p>When Hot Standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described in <span class=\"xref\">hot-standby-conflict</span>. <code class=\"varname\">max_standby_archive_delay</code> applies when WAL data is being read from WAL archive (and is therefore not current). If this value is specified without units, it is taken as milliseconds. The default is 30 seconds. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>Note that <code class=\"varname\">max_standby_archive_delay</code> is not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply any one WAL segment's data. Thus, if one query has resulted in significant delay earlier in the WAL segment, subsequent conflicting queries will have much less grace time.</p>"
    min: "-1"
    max: 2147483647
    default: 30000
    showDefault: "30 s"
    context: sighup
    unit: ms

max_standby_streaming_delay:
    type: integer
    subtype: time
    short: "Sets the maximum delay before canceling queries when a hot standby server is processing streamed WAL data."
    description: "<p>When Hot Standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described in <span class=\"xref\">hot-standby-conflict</span>. <code class=\"varname\">max_standby_streaming_delay</code> applies when WAL data is being received via streaming replication. If this value is specified without units, it is taken as milliseconds. The default is 30 seconds. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>Note that <code class=\"varname\">max_standby_streaming_delay</code> is not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply WAL data once it has been received from the primary server. Thus, if one query has resulted in significant delay, subsequent conflicting queries will have much less grace time until the standby server has caught up again.</p>"
    min: "-1"
    max: 2147483647
    default: 30000
    showDefault: "30 s"
    context: sighup
    unit: ms

max_sync_workers_per_subscription:
    type: integer
    short: "Maximum number of table synchronization workers per subscription."
    description: "<p>Maximum number of synchronization workers per subscription. This parameter controls the amount of parallelism of the initial data copy during the subscription initialization or when new tables are added.</p><p>Currently, there can be only one synchronization worker per table.</p><p>The synchronization workers are taken from the pool defined by <code class=\"varname\">max_logical_replication_workers</code>.</p><p>The default value is 2.</p>"
    min: 0
    max: 262143
    default: 2
    showDefault: 2
    context: sighup

max_wal_senders:
    type: integer
    short: "Sets the maximum number of simultaneously running WAL sender processes."
    description: "<p>Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is <code class=\"literal\">10</code>. The value <code class=\"literal\">0</code> means replication is disabled. Abrupt disconnection of a streaming client might leave an orphaned connection slot behind until a timeout is reached, so this parameter should be set slightly higher than the maximum number of expected clients so disconnected clients can immediately reconnect. This parameter can only be set at server start. Also, <code class=\"varname\">wal_level</code> must be set to <code class=\"literal\">replica</code> or higher to allow connections from standby servers.</p><p>When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.</p>"
    min: 0
    max: 262143
    default: 10
    showDefault: 10
    context: postmaster
    restart: "Gerektirir"

max_wal_size:
    type: integer
    subtype: memory
    short: "Sets the WAL size that triggers a checkpoint."
    description: "<p>Maximum size to let the WAL grow during automatic checkpoints. This is a soft limit; WAL size can exceed <code class=\"varname\">max_wal_size</code> under special circumstances, such as heavy load, a failing <code class=\"varname\">archive_command</code>, or a high <code class=\"varname\">wal_keep_size</code> setting. If this value is specified without units, it is taken as megabytes. The default is 1 GB. Increasing this parameter can increase the amount of time needed for crash recovery. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 2
    max: 2147483647
    default: 1024
    showDefault: "1 GB"
    context: sighup
    unit: MB

max_worker_processes:
    type: integer
    short: "Maximum number of concurrent worker processes."
    description: "<p>Sets the maximum number of background processes that the system can support. This parameter can only be set at server start. The default is 8.</p><p>When running a standby server, you must set this parameter to the same or higher value than on the master server. Otherwise, queries will not be allowed in the standby server.</p><p>When changing this value, consider also adjusting <code class=\"varname\">max_parallel_workers</code>, <code class=\"varname\">max_parallel_maintenance_workers</code>, and <code class=\"varname\">max_parallel_workers_per_gather</code>.</p>"
    min: 0
    max: 262143
    default: 8
    showDefault: 8
    context: postmaster
    restart: "Gerektirir"

min_parallel_index_scan_size:
    type: integer
    subtype: memory
    short: "Sets the minimum amount of index data for a parallel scan."
    description: "<p>Sets the minimum amount of index data that must be scanned in order for a parallel scan to be considered. Note that a parallel index scan typically won't touch the entire index; it is the number of pages which the planner believes will actually be touched by the scan which is relevant. This parameter is also used to decide whether a particular index can participate in a parallel vacuum. See <span class=\"xref\">sql-vacuum</span>. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The default is 512 kilobytes (<code class=\"literal\">512kB</code>).</p>"
    min: 0
    max: 715827882
    default: 64
    showDefault: "512 kB"
    context: user
    unit: 8kB

min_parallel_table_scan_size:
    type: integer
    subtype: memory
    short: "Sets the minimum amount of table data for a parallel scan."
    description: "<p>Sets the minimum amount of table data that must be scanned in order for a parallel scan to be considered. For a parallel sequential scan, the amount of table data scanned is always equal to the size of the table, but when indexes are used the amount of table data scanned will normally be less. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The default is 8 megabytes (<code class=\"literal\">8MB</code>).</p>"
    min: 0
    max: 715827882
    default: 1024
    showDefault: "8 MB"
    context: user
    unit: 8kB

recovery_target:
    type: string
    short: "Set to \"immediate\" to end recovery as soon as a consistent state is reached."
    description: "<p>This parameter specifies that recovery should end as soon as a consistent state is reached, i.e., as early as possible. When restoring from an online backup, this means the point where taking the backup ended.</p><p>Technically, this is a string parameter, but <code class=\"literal\">'immediate'</code> is currently the only allowed value.</p>"
    context: postmaster
    restart: "Gerektirir"

old_snapshot_threshold:
    type: integer
    subtype: time
    short: "Time before a snapshot is too old to read pages changed after the snapshot was taken."
    description: "<p>Sets the minimum amount of time that a query snapshot can be used without risk of a <span class=\"quote\">snapshot too old</span> error occurring when using the snapshot. Data that has been dead for longer than this threshold is allowed to be vacuumed away. This can help prevent bloat in the face of snapshots which remain in use for a long time. To prevent incorrect results due to cleanup of data which would otherwise be visible to the snapshot, an error is generated when the snapshot is older than this threshold and the snapshot is used to read a page which has been modified since the snapshot was built.</p><p>If this value is specified without units, it is taken as minutes. A value of <code class=\"literal\">-1</code> (the default) disables this feature, effectively setting the snapshot age limit to infinity. This parameter can only be set at server start.</p><p>Useful values for production work probably range from a small number of hours to a few days. Small values (such as <code class=\"literal\">0</code> or <code class=\"literal\">1min</code>) are only allowed because they may sometimes be useful for testing. While a setting as high as <code class=\"literal\">60d</code> is allowed, please note that in many workloads extreme bloat or transaction ID wraparound may occur in much shorter time frames.</p><p>When this feature is enabled, freed space at the end of a relation cannot be released to the operating system, since that could remove information needed to detect the <span class=\"quote\">snapshot too old</span> condition. All space allocated to a relation remains associated with that relation for reuse only within that relation unless explicitly freed (for example, with <span class=\"command\">VACUUM FULL</span>).</p><p>This setting does not attempt to guarantee that an error will be generated under any particular circumstances. In fact, if the correct results can be generated from (for example) a cursor which has materialized a result set, no error will be generated even if the underlying rows in the referenced table have been vacuumed away. Some tables cannot safely be vacuumed early, and so will not be affected by this setting, such as system catalogs. For such tables this setting will neither reduce bloat nor create a possibility of a <span class=\"quote\">snapshot too old</span> error on scanning.</p>"
    min: "-1"
    max: 86400
    default: "-1"
    showDefault: "-1"
    context: postmaster
    unit: min
    restart: "Gerektirir"

operator_precedence_warning:
    type: bool
    short: "Emit a warning for constructs that changed meaning since PostgreSQL 9.4."
    description: "<p>When on, the parser will emit a warning for any construct that might have changed meanings since <span class=\"productname\">PostgreSQL</span> 9.4 as a result of changes in operator precedence. This is useful for auditing applications to see if precedence changes have broken anything; but it is not meant to be kept turned on in production, since it will warn about some perfectly valid, standard-compliant SQL code. The default is <code class=\"literal\">off</code>.</p><p>See <span class=\"xref\">sql-precedence</span> for more information.</p>"
    default: "off"
    showDefault: "off"
    context: user

parallel_leader_participation:
    type: bool
    short: "Controls whether Gather and Gather Merge also run subplans."
    description: "<p>Allows the leader process to execute the query plan under <code class=\"literal\">Gather</code> and <code class=\"literal\">Gather Merge</code> nodes instead of waiting for worker processes. The default is <code class=\"literal\">on</code>. Setting this value to <code class=\"literal\">off</code> reduces the likelihood that workers will become blocked because the leader is not reading tuples fast enough, but requires the leader process to wait for worker processes to start up before the first tuples can be produced. The degree to which the leader can help or hinder performance depends on the plan type, number of workers and query duration.</p>"
    default: on
    showDefault: "on"
    context: user

parallel_setup_cost:
    type: real
    short: "Sets the planner's estimate of the cost of starting up worker processes for parallel query."
    description: "<p>Sets the planner's estimate of the cost of launching parallel worker processes. The default is 1000.</p>"
    min: 0
    max: "1.79769e+308"
    default: 1000
    showDefault: 1000
    context: user

parallel_tuple_cost:
    type: real
    short: "Sets the planner's estimate of the cost of passing each tuple (row) from worker to master backend."
    description: "<p>Sets the planner's estimate of the cost of transferring one tuple from a parallel worker process to another process. The default is 0.1.</p>"
    min: 0
    max: "1.79769e+308"
    default: "0.1"
    showDefault: "0.1"
    context: user

password_encryption:
    type: enum
    short: "Chooses the algorithm for encrypting passwords."
    description: "<p>When a password is specified in <span class=\"xref\">sql-createrole</span> or <span class=\"xref\">sql-alterrole</span>, this parameter determines the algorithm to use to encrypt the password. The default value is <code class=\"literal\">md5</code>, which stores the password as an MD5 hash (<code class=\"literal\">on</code> is also accepted, as alias for <code class=\"literal\">md5</code>). Setting this parameter to <code class=\"literal\">scram-sha-256</code> will encrypt the password with SCRAM-SHA-256.</p><p>Note that older clients might lack support for the SCRAM authentication mechanism, and hence not work with passwords encrypted with SCRAM-SHA-256. See <span class=\"xref\">auth-password</span> for more details.</p>"
    default: md5
    showDefault: md5
    context: user
    values: "[md5, scram-sha-256]"
plan_cache_mode:
    type: enum
    short: "Controls the planner's selection of custom or generic plan."
    description: "<p>Prepared statements (either explicitly prepared or implicitly generated, for example by PL/pgSQL) can be executed using custom or generic plans. Custom plans are made afresh for each execution using its specific set of parameter values, while generic plans do not rely on the parameter values and can be re-used across executions. Thus, use of a generic plan saves planning time, but if the ideal plan depends strongly on the parameter values then a generic plan may be inefficient. The choice between these options is normally made automatically, but it can be overridden with <code class=\"varname\">plan_cache_mode</code>. The allowed values are <code class=\"literal\">auto</code> (the default), <code class=\"literal\">force_custom_plan</code> and <code class=\"literal\">force_generic_plan</code>. This setting is considered when a cached plan is to be executed, not when it is prepared. For more information see <span class=\"xref\">sql-prepare</span>.</p>"
    default: auto
    showDefault: auto
    context: user
    values: "[auto, force_generic_plan, force_custom_plan]"

port:
    type: integer
    short: "Sets the TCP port the server listens on."
    description: "<p>The TCP port the server listens on; 5432 by default. Note that the same port number is used for all IP addresses the server listens on. This parameter can only be set at server start.</p>"
    min: 1
    max: 65535
    default: 5432
    showDefault: 5432
    context: postmaster
    restart: "Gerektirir"

post_auth_delay:
    type: integer
    subtype: time
    short: "Waits N seconds on connection startup after authentication."
    description: "<p>The amount of time to delay when a new server process is started, after it conducts the authentication procedure. This is intended to give developers an opportunity to attach to the server process with a debugger. If this value is specified without units, it is taken as seconds. A value of zero (the default) disables the delay. This parameter cannot be changed after session start.</p>"
    min: 0
    max: 2147
    default: 0
    showDefault: "0 s"
    context: backend
    unit: s

pre_auth_delay:
    type: integer
    subtype: time
    short: "Waits N seconds on connection startup before authentication."
    description: "<p>The amount of time to delay just after a new server process is forked, before it conducts the authentication procedure. This is intended to give developers an opportunity to attach to the server process with a debugger to trace down misbehavior in authentication. If this value is specified without units, it is taken as seconds. A value of zero (the default) disables the delay. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 60
    default: 0
    showDefault: "0 s"
    context: sighup
    unit: s

primary_conninfo:
    type: string
    short: "Sets the connection string to be used to connect to the sending server."
    description: "<p>Specifies a connection string to be used for the standby server to connect with a sending server. This string is in the format described in <span class=\"xref\">libpq-connstring</span>. If any option is unspecified in this string, then the corresponding environment variable (see <span class=\"xref\">libpq-envars</span>) is checked. If the environment variable is not set either, then defaults are used.</p><p>The connection string should specify the host name (or address) of the sending server, as well as the port number if it is not the same as the standby server's default. Also specify a user name corresponding to a suitably-privileged role on the sending server (see <span class=\"xref\">streaming-replication-authentication</span>). A password needs to be provided too, if the sender demands password authentication. It can be provided in the <code class=\"varname\">primary_conninfo</code> string, or in a separate <span class=\"filename\">~/.pgpass</span> file on the standby server (use <code class=\"literal\">replication</code> as the database name). Do not specify a database name in the <code class=\"varname\">primary_conninfo</code> string.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting (except if <code class=\"varname\">primary_conninfo</code> is an empty string). This setting has no effect if the server is not in standby mode.</p>"
    context: sighup

primary_slot_name:
    type: string
    short: "Sets the name of the replication slot to use on the sending server."
    description: "<p>Optionally specifies an existing replication slot to be used when connecting to the sending server via streaming replication to control resource removal on the upstream node (see <span class=\"xref\">streaming-replication-slots</span>). This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting. This setting has no effect if <code class=\"varname\">primary_conninfo</code> is not set or the server is not in standby mode.</p>"
    context: sighup

promote_trigger_file:
    type: string
    short: "Specifies a file name whose presence ends recovery in the standby."
    description: "<p>Specifies a trigger file whose presence ends recovery in the standby. Even if this value is not set, you can still promote the standby using <span class=\"command\">pg_ctl promote</span> or calling <span class=\"function\">pg_promote()</span>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

quote_all_identifiers:
    type: bool
    short: "When generating SQL fragments, quote all identifiers."
    description: "<p>When the database generates SQL, force all identifiers to be quoted, even if they are not (currently) keywords. This will affect the output of <span class=\"command\">EXPLAIN</span> as well as the results of functions like <span class=\"function\">pg_get_viewdef</span>. See also the <span class=\"option\">--quote-all-identifiers</span> option of <span class=\"xref\">app-pgdump</span> and <span class=\"xref\">app-pg-dumpall</span>.</p>"
    default: "off"
    showDefault: "off"
    context: user

random_page_cost:
    type: real
    short: "Sets the planner's estimate of the cost of a nonsequentially fetched disk page."
    description: "<p>Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (see <span class=\"xref\">sql-altertablespace</span>).</p><p>Reducing this value relative to <code class=\"varname\">seq_page_cost</code> will cause the system to prefer index scans; raising it will make index scans look relatively more expensive. You can raise or lower both values together to change the importance of disk I/O costs relative to CPU costs, which are described by the following parameters.</p><p>Random access to mechanical disk storage is normally much more expensive than four times sequential access. However, a lower default is used (4.0) because the majority of random accesses to disk, such as indexed reads, are assumed to be in cache. The default value can be thought of as modeling random access as 40 times slower than sequential, while expecting 90% of random reads to be cached.</p><p>If you believe a 90% cache rate is an incorrect assumption for your workload, you can increase random_page_cost to better reflect the true cost of random storage reads. Correspondingly, if your data is likely to be completely in cache, such as when the database is smaller than the total server memory, decreasing random_page_cost can be appropriate. Storage that has a low random read cost relative to sequential, e.g., solid-state drives, might also be better modeled with a lower value for random_page_cost, e.g., <code class=\"literal\">1.1</code>.</p><span class=\"tip\"><p>Although the system will let you set <code class=\"varname\">random_page_cost</code> to less than <code class=\"varname\">seq_page_cost</code>, it is not physically sensible to do so. However, setting them equal makes sense if the database is entirely cached in RAM, since in that case there is no penalty for touching pages out of sequence. Also, in a heavily-cached database you should lower both values relative to the CPU parameters, since the cost of fetching a page already in RAM is much smaller than it would normally be.</p></span>"
    min: 0
    max: "1.79769e+308"
    default: 4
    showDefault: 4
    context: user

recovery_end_command:
    type: string
    short: "Sets the shell command that will be executed once at the end of recovery."
    description: "<p>This parameter specifies a shell command that will be executed once only at the end of recovery. This parameter is optional. The purpose of the <code class=\"varname\">recovery_end_command</code> is to provide a mechanism for cleanup following replication or recovery. Any <code class=\"literal\">%r</code> is replaced by the name of the file containing the last valid restart point, like in <code class=\"varname\">archive_cleanup_command</code>.</p><p>If the command returns a nonzero exit status then a warning log message will be written and the database will proceed to start up anyway. An exception is that if the command was terminated by a signal or an error by the shell (such as command not found), the database will not proceed with startup.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

recovery_min_apply_delay:
    type: integer
    subtype: time
    short: "Sets the minimum delay for applying changes during recovery."
    description: "<p>By default, a standby server restores WAL records from the sending server as soon as possible. It may be useful to have a time-delayed copy of the data, offering opportunities to correct data loss errors. This parameter allows you to delay recovery by a specified amount of time. For example, if you set this parameter to <code class=\"literal\">5min</code>, the standby will replay each transaction commit only when the system time on the standby is at least five minutes past the commit time reported by the master. If this value is specified without units, it is taken as milliseconds. The default is zero, adding no delay.</p><p>It is possible that the replication delay between servers exceeds the value of this parameter, in which case no delay is added. Note that the delay is calculated between the WAL time stamp as written on master and the current time on the standby. Delays in transfer because of network lag or cascading replication configurations may reduce the actual wait time significantly. If the system clocks on master and standby are not synchronized, this may lead to recovery applying records earlier than expected; but that is not a major issue because useful settings of this parameter are much larger than typical time deviations between servers.</p><p>The delay occurs only on WAL records for transaction commits. Other records are replayed as quickly as possible, which is not a problem because MVCC visibility rules ensure their effects are not visible until the corresponding commit record is applied.</p><p>The delay occurs once the database in recovery has reached a consistent state, until the standby is promoted or triggered. After that the standby will end recovery without further waiting.</p><p>This parameter is intended for use with streaming replication deployments; however, if the parameter is specified it will be honored in all cases except crash recovery. <code class=\"varname\">hot_standby_feedback</code> will be delayed by use of this feature which could lead to bloat on the master; use both together with care. <span class=\"warning\"><p>Synchronous replication is affected by this setting when <code class=\"varname\">synchronous_commit</code> is set to <code class=\"literal\">remote_apply</code>; every <code class=\"literal\">COMMIT</code> will need to wait to be applied.</p></span></p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 ms"
    context: sighup
    unit: ms

recovery_target_action:
    type: enum
    short: "Sets the action to perform upon reaching the recovery target."
    description: "<p>Specifies what action the server should take once the recovery target is reached. The default is <code class=\"literal\">pause</code>, which means recovery will be paused. <code class=\"literal\">promote</code> means the recovery process will finish and the server will start to accept connections. Finally <code class=\"literal\">shutdown</code> will stop the server after reaching the recovery target.</p><p>The intended use of the <code class=\"literal\">pause</code> setting is to allow queries to be executed against the database to check if this recovery target is the most desirable point for recovery. The paused state can be resumed by using <span class=\"function\">pg_wal_replay_resume()</span> (see <span class=\"xref\">functions-recovery-control-table</span>), which then causes recovery to end. If this recovery target is not the desired stopping point, then shut down the server, change the recovery target settings to a later target and restart to continue recovery.</p><p>The <code class=\"literal\">shutdown</code> setting is useful to have the instance ready at the exact replay point desired. The instance will still be able to replay more WAL records (and in fact will have to replay WAL records since the last checkpoint next time it is started).</p><p>Note that because <span class=\"filename\">recovery.signal</span> will not be removed when <code class=\"varname\">recovery_target_action</code> is set to <code class=\"literal\">shutdown</code>, any subsequent start will end with immediate shutdown unless the configuration is changed or the <span class=\"filename\">recovery.signal</span> file is removed manually.</p><p>This setting has no effect if no recovery target is set. If <code class=\"varname\">hot_standby</code> is not enabled, a setting of <code class=\"literal\">pause</code> will act the same as <code class=\"literal\">shutdown</code>. If the recovery target is reached while a promotion is ongoing, a setting of <code class=\"literal\">pause</code> will act the same as <code class=\"literal\">promote</code>.</p><p>In any case, if a recovery target is configured but the archive recovery ends before the target is reached, the server will shut down with a fatal error.</p>"
    default: pause
    showDefault: pause
    context: postmaster
    values: "[pause, promote, shutdown]"
    restart: "Gerektirir"

recovery_target_inclusive:
    type: bool
    short: "Sets whether to include or exclude transaction with recovery target."
    description: "<p>Specifies whether to stop just after the specified recovery target (<code class=\"literal\">on</code>), or just before the recovery target (<code class=\"literal\">off</code>). Applies when <code class=\"varname\">recovery_target_lsn</code>, <code class=\"varname\">recovery_target_time</code>, or <code class=\"varname\">recovery_target_xid</code> is specified. This setting controls whether transactions having exactly the target WAL location (LSN), commit time, or transaction ID, respectively, will be included in the recovery. Default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: postmaster
    restart: "Gerektirir"

recovery_target_lsn:
    type: string
    short: "Sets the LSN of the write-ahead log location up to which recovery will proceed."
    description: "<p>This parameter specifies the LSN of the write-ahead log location up to which recovery will proceed. The precise stopping point is also influenced by <span class=\"xref\">guc-recovery-target-inclusive</span>. This parameter is parsed using the system data type <span class=\"link\"><span class=\"type\">pg_lsn</span></span>.</p>"
    context: postmaster
    restart: "Gerektirir"

recovery_target_name:
    type: string
    short: "Sets the named restore point up to which recovery will proceed."
    description: "<p>This parameter specifies the named restore point (created with <span class=\"function\">pg_create_restore_point()</span>) to which recovery will proceed.</p>"
    context: postmaster
    restart: "Gerektirir"

recovery_target_time:
    type: string
    short: "Sets the time stamp up to which recovery will proceed."
    description: "<p>This parameter specifies the time stamp up to which recovery will proceed. The precise stopping point is also influenced by <span class=\"xref\">guc-recovery-target-inclusive</span>.</p><p>The value of this parameter is a time stamp in the same format accepted by the <span class=\"type\">timestamp with time zone</span> data type, except that you cannot use a time zone abbreviation (unless the <code class=\"varname\">timezone_abbreviations</code> variable has been set earlier in the configuration file). Preferred style is to use a numeric offset from UTC, or you can write a full time zone name, e.g., <code class=\"literal\">Europe/Helsinki</code> not <code class=\"literal\">EEST</code>.</p>"
    context: postmaster
    restart: "Gerektirir"

recovery_target_timeline:
    type: string
    short: "Specifies the timeline to recover into."
    description: "<p>Specifies recovering into a particular timeline. The value can be a numeric timeline ID or a special value. The value <code class=\"literal\">current</code> recovers along the same timeline that was current when the base backup was taken. The value <code class=\"literal\">latest</code> recovers to the latest timeline found in the archive, which is useful in a standby server. <code class=\"literal\">latest</code> is the default.</p><p>You usually only need to set this parameter in complex re-recovery situations, where you need to return to a state that itself was reached after a point-in-time recovery. See <span class=\"xref\">backup-timelines</span> for discussion.</p>"
    default: latest
    showDefault: latest
    context: postmaster
    restart: "Gerektirir"

recovery_target_xid:
    type: string
    short: "Sets the transaction ID up to which recovery will proceed."
    description: "<p>This parameter specifies the transaction ID up to which recovery will proceed. Keep in mind that while transaction IDs are assigned sequentially at transaction start, transactions can complete in a different numeric order. The transactions that will be recovered are those that committed before (and optionally including) the specified one. The precise stopping point is also influenced by <span class=\"xref\">guc-recovery-target-inclusive</span>.</p>"
    context: postmaster
    restart: "Gerektirir"

restart_after_crash:
    type: bool
    short: "Reinitialize server after backend crash."
    description: "<p>When set to on, which is the default, <span class=\"productname\">PostgreSQL</span> will automatically reinitialize after a backend crash. Leaving this value set to on is normally the best way to maximize the availability of the database. However, in some circumstances, such as when <span class=\"productname\">PostgreSQL</span> is being invoked by clusterware, it may be useful to disable the restart so that the clusterware can gain control and take any actions it deems appropriate.</p>"
    default: on
    showDefault: "on"
    context: sighup

restore_command:
    type: string
    short: "Sets the shell command that will be called to retrieve an archived WAL file."
    description: "<p>The local shell command to execute to retrieve an archived segment of the WAL file series. This parameter is required for archive recovery, but optional for streaming replication. Any <code class=\"literal\">%f</code> in the string is replaced by the name of the file to retrieve from the archive, and any <code class=\"literal\">%p</code> is replaced by the copy destination path name on the server. (The path name is relative to the current working directory, i.e., the cluster's data directory.) Any <code class=\"literal\">%r</code> is replaced by the name of the file containing the last valid restart point. That is the earliest file that must be kept to allow a restore to be restartable, so this information can be used to truncate the archive to just the minimum required to support restarting from the current restore. <code class=\"literal\">%r</code> is typically only used by warm-standby configurations (see <span class=\"xref\">warm-standby</span>). Write <code class=\"literal\">%%</code> to embed an actual <code class=\"literal\">%</code> character.</p><p>It is important for the command to return a zero exit status only if it succeeds. The command <span class=\"emphasis\">will</span> be asked for file names that are not present in the archive; it must return nonzero when so asked. Examples:<span class=\"programlisting\">restore_command = 'cp /mnt/server/archivedir/%f \"%p\"'restore_command = 'copy \"C:\\\\server\\\\archivedir\\\\%f\" \"%p\"' # Windows</span> An exception is that if the command was terminated by a signal (other than <span class=\"systemitem\">SIGTERM</span>, which is used as part of a database server shutdown) or an error by the shell (such as command not found), then recovery will abort and the server will not start up.</p><p>This parameter can only be set at server start.</p>"
    context: postmaster
    restart: "Gerektirir"

row_security:
    type: bool
    short: "Enable row security."
    description: "<p>This variable controls whether to raise an error in lieu of applying a row security policy. When set to <code class=\"literal\">on</code>, policies apply normally. When set to <code class=\"literal\">off</code>, queries fail which would otherwise apply at least one policy. The default is <code class=\"literal\">on</code>. Change to <code class=\"literal\">off</code> where limited row visibility could cause incorrect results; for example, <span class=\"application\">pg_dump</span> makes that change by default. This variable has no effect on roles which bypass every row security policy, to wit, superusers and roles with the <code class=\"literal\">BYPASSRLS</code> attribute.</p><p>For more information on row security policies, see <span class=\"xref\">sql-createpolicy</span>.</p>"
    default: on
    showDefault: "on"
    context: user

search_path:
    type: string
    short: "Sets the schema search order for names that are not schema-qualified."
    description: "<p>This variable specifies the order in which schemas are searched when an object (table, data type, function, etc.) is referenced by a simple name with no schema specified. When there are objects of identical names in different schemas, the one found first in the search path is used. An object that is not in any of the schemas in the search path can only be referenced by specifying its containing schema with a qualified (dotted) name.</p><p>The value for <code class=\"varname\">search_path</code> must be a comma-separated list of schema names. Any name that is not an existing schema, or is a schema for which the user does not have <code class=\"literal\">USAGE</code> permission, is silently ignored.</p><p>If one of the list items is the special name <code class=\"literal\">$user</code>, then the schema having the name returned by <span class=\"function\">CURRENT_USER</span> is substituted, if there is such a schema and the user has <code class=\"literal\">USAGE</code> permission for it. (If not, <code class=\"literal\">$user</code> is ignored.)</p><p>The system catalog schema, <code class=\"literal\">pg_catalog</code>, is always searched, whether it is mentioned in the path or not. If it is mentioned in the path then it will be searched in the specified order. If <code class=\"literal\">pg_catalog</code> is not in the path then it will be searched <span class=\"emphasis\">before</span> searching any of the path items.</p><p>Likewise, the current session's temporary-table schema, <code class=\"literal\">pg_temp_<span class=\"replaceable\">nnn</span></code>, is always searched if it exists. It can be explicitly listed in the path by using the alias <code class=\"literal\">pg_temp</code><span class=\"indexterm\"><span class=\"primary\">pg_temp</span></span>. If it is not listed in the path then it is searched first (even before <code class=\"literal\">pg_catalog</code>). However, the temporary schema is only searched for relation (table, view, sequence, etc) and data type names. It is never searched for function or operator names.</p><p>When objects are created without specifying a particular target schema, they will be placed in the first valid schema named in <code class=\"varname\">search_path</code>. An error is reported if the search path is empty.</p><p>The default value for this parameter is <code class=\"literal\">\"$user\", public</code>. This setting supports shared use of a database (where no users have private schemas, and all share use of <code class=\"literal\">public</code>), private per-user schemas, and combinations of these. Other effects can be obtained by altering the default search path setting, either globally or per-user.</p><p>For more information on schema handling, see <span class=\"xref\">ddl-schemas</span>. In particular, the default configuration is suitable only when the database has a single user or a few mutually-trusting users.</p><p>The current effective value of the search path can be examined via the <span class=\"acronym\">SQL</span> function <span class=\"function\">current_schemas</span> (see <span class=\"xref\">functions-info</span>). This is not quite the same as examining the value of <code class=\"varname\">search_path</code>, since <span class=\"function\">current_schemas</span> shows how the items appearing in <code class=\"varname\">search_path</code> were resolved.</p>"
    default: "\"$user\", public"
    showDefault: "\"$user\", public"
    context: user

seq_page_cost:
    type: real
    short: "Sets the planner's estimate of the cost of a sequentially fetched disk page."
    description: "<p>Sets the planner's estimate of the cost of a disk page fetch that is part of a series of sequential fetches. The default is 1.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (see <span class=\"xref\">sql-altertablespace</span>).</p>"
    min: 0
    max: "1.79769e+308"
    default: 1
    showDefault: 1
    context: user

session_preload_libraries:
    type: string
    short: "Lists shared libraries to preload into each backend."
    description: "<p>This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for the <span class=\"xref\">sql-load</span> command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail. Only superusers can change this setting.</p><p>The intent of this feature is to allow debugging or performance-measurement libraries to be loaded into specific sessions without an explicit <span class=\"command\">LOAD</span> command being given. For example, <span class=\"xref\">auto-explain</span> could be enabled for all sessions under a given user name by setting this parameter with <span class=\"command\">ALTER ROLE SET</span>. Also, this parameter can be changed without restarting the server (but changes only take effect when a new session is started), so it is easier to add new modules this way, even if they should apply to all sessions.</p><p>Unlike <code class=\"varname\">shared_preload_libraries</code>, there is no large performance advantage to loading a library at session start rather than when it is first used. There is some advantage, however, when connection pooling is used.</p>"
    context: superuser

session_replication_role:
    type: enum
    short: "Sets the session's behavior for triggers and rewrite rules."
    description: "<p>Controls firing of replication-related triggers and rules for the current session. Setting this variable requires superuser privilege and results in discarding any previously cached query plans. Possible values are <code class=\"literal\">origin</code> (the default), <code class=\"literal\">replica</code> and <code class=\"literal\">local</code>.</p><p>The intended use of this setting is that logical replication systems set it to <code class=\"literal\">replica</code> when they are applying replicated changes. The effect of that will be that triggers and rules (that have not been altered from their default configuration) will not fire on the replica. See the <span class=\"xref\">sql-altertable</span> clauses <code class=\"literal\">ENABLE TRIGGER</code> and <code class=\"literal\">ENABLE RULE</code> for more information.</p><p>PostgreSQL treats the settings <code class=\"literal\">origin</code> and <code class=\"literal\">local</code> the same internally. Third-party replication systems may use these two values for their internal purposes, for example using <code class=\"literal\">local</code> to designate a session whose changes should not be replicated.</p><p>Since foreign keys are implemented as triggers, setting this parameter to <code class=\"literal\">replica</code> also disables all foreign key checks, which can leave data in an inconsistent state if improperly used.</p>"
    default: origin
    showDefault: origin
    context: superuser
    values: "[origin, replica, local]"

ssl_dh_params_file:
    type: string
    short: "Location of the SSL DH parameters file."
    description: "<p>Specifies the name of the file containing Diffie-Hellman parameters used for so-called ephemeral DH family of SSL ciphers. The default is empty, in which case compiled-in default DH parameters used. Using custom DH parameters reduces the exposure if an attacker manages to crack the well-known compiled-in DH parameters. You can create your own DH parameters file with the command <span class=\"command\">openssl dhparam -out dhparams.pem 2048</span>.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

stats_temp_directory:
    type: string
    short: "Writes temporary statistics files to the specified directory."
    description: "<p>Sets the directory to store temporary statistics data in. This can be a path relative to the data directory or an absolute path. The default is <span class=\"filename\">pg_stat_tmp</span>. Pointing this at a RAM-based file system will decrease physical I/O requirements and can lead to improved performance. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: pg_stat_tmp
    showDefault: pg_stat_tmp
    context: sighup

shared_buffers:
    type: integer
    subtype: memory
    short: "Sets the number of shared memory buffers used by the server."
    description: "<p>Sets the amount of memory the database server uses for shared memory buffers. The default is typically 128 megabytes (<code class=\"literal\">128MB</code>), but might be less if your kernel settings will not support it (as determined during <span class=\"application\">initdb</span>). This setting must be at least 128 kilobytes. However, settings significantly higher than the minimum are usually needed for good performance. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. (Non-default values of <code class=\"symbol\">BLCKSZ</code> change the minimum value.) This parameter can only be set at server start.</p><p>If you have a dedicated database server with 1GB or more of RAM, a reasonable starting value for <code class=\"varname\">shared_buffers</code> is 25% of the memory in your system. There are some workloads where even larger settings for <code class=\"varname\">shared_buffers</code> are effective, but because <span class=\"productname\">PostgreSQL</span> also relies on the operating system cache, it is unlikely that an allocation of more than 40% of RAM to <code class=\"varname\">shared_buffers</code> will work better than a smaller amount. Larger settings for <code class=\"varname\">shared_buffers</code> usually require a corresponding increase in <code class=\"varname\">max_wal_size</code>, in order to spread out the process of writing large quantities of new or changed data over a longer period of time.</p><p>On systems with less than 1GB of RAM, a smaller percentage of RAM is appropriate, so as to leave adequate space for the operating system.</p>"
    min: "16 (8kB)"
    max: "1073741823 (8589934584kB)"
    default: 1024
    showDefault: "1024 (8 MB)"
    context: postmaster
    unit: 8kB
    restart: "Gerektirir"

shared_memory_type:
    type: enum
    short: "Selects the shared memory implementation used for the main shared memory region."
    description: "<p>Specifies the shared memory implementation that the server should use for the main shared memory region that holds <span class=\"productname\">PostgreSQL</span>'s shared buffers and other shared data. Possible values are <code class=\"literal\">mmap</code> (for anonymous shared memory allocated using <span class=\"function\">mmap</span>), <code class=\"literal\">sysv</code> (for System V shared memory allocated via <span class=\"function\">shmget</span>) and <code class=\"literal\">windows</code> (for Windows shared memory). Not all values are supported on all platforms; the first supported option is the default for that platform. The use of the <code class=\"literal\">sysv</code> option, which is not the default on any platform, is generally discouraged because it typically requires non-default kernel settings to allow for large allocations (see <span class=\"xref\">sysvipc</span>).</p>"
    default: mmap
    showDefault: mmap
    context: postmaster
    values: "[sysv, mmap]"
    restart: "Gerektirir"

shared_preload_libraries:
    type: string
    short: "Lists shared libraries to preload into server."
    description: "<p>This variable specifies one or more shared libraries to be preloaded at server start. It contains a comma-separated list of library names, where each name is interpreted as for the <span class=\"xref\">sql-load</span> command. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. This parameter can only be set at server start. If a specified library is not found, the server will fail to start.</p><p>Some libraries need to perform certain operations that can only take place at postmaster start, such as allocating shared memory, reserving light-weight locks, or starting background workers. Those libraries must be loaded at server start through this parameter. See the documentation of each library for details.</p><p>Other libraries can also be preloaded. By preloading a shared library, the library startup time is avoided when the library is first used. However, the time to start each new server process might increase slightly, even if that process never uses the library. So this parameter is recommended only for libraries that will be used in most sessions. Also, changing this parameter requires a server restart, so this is not the right setting to use for short-term debugging tasks, say. Use <code class=\"varname\">session_preload_libraries</code> for that instead.</p><span class=\"note\"><p>On Windows hosts, preloading a library at server start will not reduce the time required to start each new server process; each server process will re-load all preload libraries. However, <span class=\"varname\">shared_preload_libraries </span> is still useful on Windows hosts for libraries that need to perform operations at postmaster start time.</p></span>"
    context: postmaster
    restart: "Gerektirir"
ssl:
    type: bool
    short: "Enables SSL connections."
    description: "<p>Enables <span class=\"acronym\">SSL</span> connections. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

ssl_ca_file:
    type: string
    short: "Location of the SSL certificate authority file."
    description: "<p>Specifies the name of the file containing the SSL server certificate authority (CA). Relative paths are relative to the data directory. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is empty, meaning no CA file is loaded, and client certificate verification is not performed.</p>"
    context: sighup

ssl_cert_file:
    type: string
    short: "Location of the SSL server certificate file."
    description: "<p>Specifies the name of the file containing the SSL server certificate. Relative paths are relative to the data directory. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <span class=\"filename\">server.crt</span>.</p>"
    default: "server.crt"
    showDefault: "server.crt"
    context: sighup

ssl_ciphers:
    type: string
    short: "Sets the list of allowed SSL ciphers."
    description: "<p>Specifies a list of <span class=\"acronym\">SSL</span> cipher suites that are allowed to be used by SSL connections. See the <span class=\"citerefentry\"><span class=\"refentrytitle\">ciphers</span></span> manual page in the <span class=\"application\">OpenSSL</span> package for the syntax of this setting and a list of supported values. Only connections using TLS version 1.2 and lower are affected. There is currently no setting that controls the cipher choices used by TLS version 1.3 connections. The default value is <code class=\"literal\">HIGH:MEDIUM:+3DES:!aNULL</code>. The default is usually a reasonable choice unless you have specific security requirements.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>Explanation of the default value: <span class=\"variablelist\"><span class=\"varlistentry\"><span class=\"term\"><code class=\"literal\">HIGH</code></span><li class=\"listitem\"><p>Cipher suites that use ciphers from <code class=\"literal\">HIGH</code> group (e.g., AES, Camellia, 3DES)</p></li></span><span class=\"varlistentry\"><span class=\"term\"><code class=\"literal\">MEDIUM</code></span><li class=\"listitem\"><p>Cipher suites that use ciphers from <code class=\"literal\">MEDIUM</code> group (e.g., RC4, SEED)</p></li></span><span class=\"varlistentry\"><span class=\"term\"><code class=\"literal\">+3DES</code></span><li class=\"listitem\"><p>The OpenSSL default order for <code class=\"literal\">HIGH</code> is problematic because it orders 3DES higher than AES128. This is wrong because 3DES offers less security than AES128, and it is also much slower. <code class=\"literal\">+3DES</code> reorders it after all other <code class=\"literal\">HIGH</code> and <code class=\"literal\">MEDIUM</code> ciphers.</p></li></span><span class=\"varlistentry\"><span class=\"term\"><code class=\"literal\">!aNULL</code></span><li class=\"listitem\"><p>Disables anonymous cipher suites that do no authentication. Such cipher suites are vulnerable to man-in-the-middle attacks and therefore should not be used.</p></li></span></span></p><p>Available cipher suite details will vary across OpenSSL versions. Use the command <code class=\"literal\">openssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'</code> to see actual details for the currently installed <span class=\"application\">OpenSSL</span> version. Note that this list is filtered at run time based on the server key type.</p>"
    default: "HIGH:MEDIUM:+3DES:!aNULL"
    showDefault: "HIGH:MEDIUM:+3DES:!aNULL"
    context: sighup

ssl_crl_file:
    type: string
    short: "Location of the SSL certificate revocation list file."
    description: "<p>Specifies the name of the file containing the SSL server certificate revocation list (CRL). Relative paths are relative to the data directory. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is empty, meaning no CRL file is loaded.</p>"
    context: sighup

ssl_ecdh_curve:
    type: string
    short: "Sets the curve to use for ECDH."
    description: "<p>Specifies the name of the curve to use in <span class=\"acronym\">ECDH</span> key exchange. It needs to be supported by all clients that connect. It does not need to be the same curve used by the server's Elliptic Curve key. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">prime256v1</code>.</p><p>OpenSSL names for the most common curves are: <code class=\"literal\">prime256v1</code> (NIST P-256), <code class=\"literal\">secp384r1</code> (NIST P-384), <code class=\"literal\">secp521r1</code> (NIST P-521). The full list of available curves can be shown with the command <span class=\"command\">openssl ecparam -list_curves</span>. Not all of them are usable in <span class=\"acronym\">TLS</span> though.</p>"
    default: prime256v1
    showDefault: prime256v1
    context: sighup

ssl_key_file:
    type: string
    short: "Location of the SSL server private key file."
    description: "<p>Specifies the name of the file containing the SSL server private key. Relative paths are relative to the data directory. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <span class=\"filename\">server.key</span>.</p>"
    default: "server.key"
    showDefault: "server.key"
    context: sighup

ssl_max_protocol_version:
    type: enum
    short: "Sets the maximum SSL/TLS protocol version to use."
    description: "<p>Sets the maximum SSL/TLS protocol version to use. Valid values are as for <code class=\"varname\">ssl_min_protocol_version</code>, with addition of an empty string, which allows any protocol version. The default is to allow any version. Setting the maximum protocol version is mainly useful for testing or if some component has issues working with a newer protocol.</p>"
    context: sighup
    values: "[, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3]"

ssl_min_protocol_version:
    type: enum
    short: "Sets the minimum SSL/TLS protocol version to use."
    description: "<p>Sets the minimum SSL/TLS protocol version to use. Valid values are currently: <code class=\"literal\">TLSv1</code>, <code class=\"literal\">TLSv1.1</code>, <code class=\"literal\">TLSv1.2</code>, <code class=\"literal\">TLSv1.3</code>. Older versions of the <span class=\"productname\">OpenSSL</span> library do not support all values; an error will be raised if an unsupported setting is chosen. Protocol versions before TLS 1.0, namely SSL version 2 and 3, are always disabled.</p><p>The default is <code class=\"literal\">TLSv1.2</code>, which satisfies industry best practices as of this writing.</p>"
    default: "TLSv1.2"
    showDefault: "TLSv1.2"
    context: sighup
    values: "[TLSv1, TLSv1.1, TLSv1.2, TLSv1.3]"

ssl_passphrase_command:
    type: string
    short: "Command to obtain passphrases for SSL."
    description: "<p>Sets an external command to be invoked when a passphrase for decrypting an SSL file such as a private key needs to be obtained. By default, this parameter is empty, which means the built-in prompting mechanism is used.</p><p>The command must print the passphrase to the standard output and exit with code 0. In the parameter value, <code class=\"literal\">%p</code> is replaced by a prompt string. (Write <code class=\"literal\">%%</code> for a literal <code class=\"literal\">%</code>.) Note that the prompt string will probably contain whitespace, so be sure to quote adequately. A single newline is stripped from the end of the output if present.</p><p>The command does not actually have to prompt the user for a passphrase. It can read it from a file, obtain it from a keychain facility, or similar. It is up to the user to make sure the chosen mechanism is adequately secure.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

ssl_passphrase_command_supports_reload:
    type: bool
    short: "Also use ssl_passphrase_command during server reload."
    description: "<p>This parameter determines whether the passphrase command set by <code class=\"varname\">ssl_passphrase_command</code> will also be called during a configuration reload if a key file needs a passphrase. If this parameter is off (the default), then <code class=\"varname\">ssl_passphrase_command</code> will be ignored during a reload and the SSL configuration will not be reloaded if a passphrase is needed. That setting is appropriate for a command that requires a TTY for prompting, which might not be available when the server is running. Setting this parameter to on might be appropriate if the passphrase is obtained from a file, for example.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

ssl_prefer_server_ciphers:
    type: bool
    short: "Give priority to server ciphersuite order."
    description: "<p>Specifies whether to use the server's SSL cipher preferences, rather than the client's. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default is <code class=\"literal\">on</code>.</p><p>Older PostgreSQL versions do not have this setting and always use the client's preferences. This setting is mainly for backward compatibility with those versions. Using the server's preferences is usually better because it is more likely that the server is appropriately configured.</p>"
    default: on
    showDefault: "on"
    context: sighup

standard_conforming_strings:
    type: bool
    short: "Causes '...' strings to treat backslashes literally."
    description: "<p>This controls whether ordinary string literals (<code class=\"literal\">'...'</code>) treat backslashes literally, as specified in the SQL standard. Beginning in <span class=\"productname\">PostgreSQL</span> 9.1, the default is <code class=\"literal\">on</code> (prior releases defaulted to <code class=\"literal\">off</code>). Applications can check this parameter to determine how string literals will be processed. The presence of this parameter can also be taken as an indication that the escape string syntax (<code class=\"literal\">E'...'</code>) is supported. Escape string syntax (<span class=\"xref\">sql-syntax-strings-escape</span>) should be used if an application desires backslashes to be treated as escape characters.</p>"
    default: on
    showDefault: "on"
    context: user

statement_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum allowed duration of any statement."
    description: "<p>Abort any statement that takes more than the specified amount of time. If <code class=\"varname\">log_min_error_statement</code> is set to <code class=\"literal\">ERROR</code> or lower, the statement that timed out will also be logged. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.</p><p>The timeout is measured from the time a command arrives at the server until it is completed by the server. If multiple SQL statements appear in a single simple-Query message, the timeout is applied to each statement separately. (<span class=\"productname\">PostgreSQL</span> versions before 13 usually treated the timeout as applying to the whole query string.) In extended query protocol, the timeout starts running when any query-related message (Parse, Bind, Execute, Describe) arrives, and it is canceled by completion of an Execute or Sync message.</p><p>Setting <code class=\"varname\">statement_timeout</code> in <span class=\"filename\">postgresql.conf</span> is not recommended because it would affect all sessions.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 ms"
    context: user
    unit: ms

superuser_reserved_connections:
    type: integer
    short: "Sets the number of connection slots reserved for superusers."
    description: "<p>Determines the number of connection <span class=\"quote\">slots</span> that are reserved for connections by <span class=\"productname\">PostgreSQL</span> superusers. At most <code class=\"varname\">max_connections</code> connections can ever be active simultaneously. Whenever the number of active concurrent connections is at least <code class=\"varname\">max_connections</code> minus <code class=\"varname\">superuser_reserved_connections</code>, new connections will be accepted only for superusers, and no new replication connections will be accepted.</p><p>The default value is three connections. The value must be less than <code class=\"varname\">max_connections</code>. This parameter can only be set at server start.</p>"
    min: 0
    max: 262143
    default: 3
    showDefault: 3
    context: postmaster
    restart: "Gerektirir"

synchronize_seqscans:
    type: bool
    short: "Enable synchronized sequential scans."
    description: "<p>This allows sequential scans of large tables to synchronize with each other, so that concurrent scans read the same block at about the same time and hence share the I/O workload. When this is enabled, a scan might start in the middle of the table and then <span class=\"quote\">wrap around</span> the end to cover all rows, so as to synchronize with the activity of scans already in progress. This can result in unpredictable changes in the row ordering returned by queries that have no <code class=\"literal\">ORDER BY</code> clause. Setting this parameter to <code class=\"literal\">off</code> ensures the pre-8.3 behavior in which a sequential scan always starts from the beginning of the table. The default is <code class=\"literal\">on</code>.</p>"
    default: on
    showDefault: "on"
    context: user

synchronous_commit:
    type: enum
    short: "Sets the current transaction's synchronization level."
    description: "<p>Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a <span class=\"quote\">success</span> indication to the client. Valid values are <code class=\"literal\">on</code>, <code class=\"literal\">remote_apply</code>, <code class=\"literal\">remote_write</code>, <code class=\"literal\">local</code>, and <code class=\"literal\">off</code>. The default, and safe, setting is <code class=\"literal\">on</code>. When <code class=\"literal\">off</code>, there can be a delay between when success is reported to the client and when the transaction is really guaranteed to be safe against a server crash. (The maximum delay is three times <code class=\"varname\">wal_writer_delay</code>.) Unlike <code class=\"varname\">fsync</code>, setting this parameter to <code class=\"literal\">off</code> does not create any risk of database inconsistency: an operating system or database crash might result in some recent allegedly-committed transactions being lost, but the database state will be just the same as if those transactions had been aborted cleanly. So, turning <code class=\"varname\">synchronous_commit</code> off can be a useful alternative when performance is more important than exact certainty about the durability of a transaction. For more discussion see <span class=\"xref\">wal-async-commit</span>.</p><p>If <code class=\"varname\">synchronous_standby_names</code> is non-empty, this parameter also controls whether or not transaction commits will wait for their WAL records to be replicated to the standby server(s). When set to <code class=\"literal\">on</code>, commits will wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and flushed it to disk. This ensures the transaction will not be lost unless both the primary and all synchronous standbys suffer corruption of their database storage. When set to <code class=\"literal\">remote_apply</code>, commits will wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and applied it, so that it has become visible to queries on the standby(s). When set to <code class=\"literal\">remote_write</code>, commits will wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and written it out to their operating system. This setting is sufficient to ensure data preservation even if a standby instance of <span class=\"productname\">PostgreSQL</span> were to crash, but not if the standby suffers an operating-system-level crash, since the data has not necessarily reached durable storage on the standby. Finally, the setting <code class=\"literal\">local</code> causes commits to wait for local flush to disk, but not for replication. This is not usually desirable when synchronous replication is in use, but is provided for completeness.</p><p>If <code class=\"varname\">synchronous_standby_names</code> is empty, the settings <code class=\"literal\">on</code>, <code class=\"literal\">remote_apply</code>, <code class=\"literal\">remote_write</code> and <code class=\"literal\">local</code> all provide the same synchronization level: transaction commits only wait for local flush to disk.</p><p>This parameter can be changed at any time; the behavior for any one transaction is determined by the setting in effect when it commits. It is therefore possible, and useful, to have some transactions commit synchronously and others asynchronously. For example, to make a single multistatement transaction commit asynchronously when the default is the opposite, issue <span class=\"command\">SET LOCAL synchronous_commit TO OFF</span> within the transaction.</p>"
    default: on
    showDefault: "on"
    context: user
    values: "[local, remote_write, remote_apply, on, off]"

synchronous_standby_names:
    type: string
    short: "Number of synchronous standbys and list of names of potential synchronous ones."
    description: "<p>Specifies a list of standby servers that can support <span class=\"firstterm\">synchronous replication</span>, as described in <span class=\"xref\">synchronous-replication</span>. There will be one or more active synchronous standbys; transactions waiting for commit will be allowed to proceed after these standby servers confirm receipt of their data. The synchronous standbys will be those whose names appear in this list, and that are both currently connected and streaming data in real-time (as shown by a state of <code class=\"literal\">streaming</code> in the <span class=\"link\"><span class=\"structname\">pg_stat_replication</span></span> view). Specifying more than one synchronous standby can allow for very high availability and protection against data loss.</p><p>The name of a standby server for this purpose is the <code class=\"varname\">application_name</code> setting of the standby, as set in the standby's connection information. In case of a physical replication standby, this should be set in the <code class=\"varname\">primary_conninfo</code> setting; the default is the setting of <code class=\"varname\">cluster_name</code> if set, else <code class=\"literal\">walreceiver</code>. For logical replication, this can be set in the connection information of the subscription, and it defaults to the subscription name. For other replication stream consumers, consult their documentation.</p><p>This parameter specifies a list of standby servers using either of the following syntaxes:<span class=\"synopsis\">[FIRST] <span class=\"replaceable\">num_sync</span> ( <span class=\"replaceable\">standby_name</span> [, ...] )ANY <span class=\"replaceable\">num_sync</span> ( <span class=\"replaceable\">standby_name</span> [, ...] )<span class=\"replaceable\">standby_name</span> [, ...]</span> where <span class=\"replaceable\">num_sync</span> is the number of synchronous standbys that transactions need to wait for replies from, and <span class=\"replaceable\">standby_name</span> is the name of a standby server. <code class=\"literal\">FIRST</code> and <code class=\"literal\">ANY</code> specify the method to choose synchronous standbys from the listed servers.</p><p>The keyword <code class=\"literal\">FIRST</code>, coupled with <span class=\"replaceable\">num_sync</span>, specifies a priority-based synchronous replication and makes transaction commits wait until their WAL records are replicated to <span class=\"replaceable\">num_sync</span> synchronous standbys chosen based on their priorities. For example, a setting of <code class=\"literal\">FIRST 3 (s1, s2, s3, s4)</code> will cause each commit to wait for replies from three higher-priority standbys chosen from standby servers <code class=\"literal\">s1</code>, <code class=\"literal\">s2</code>, <code class=\"literal\">s3</code> and <code class=\"literal\">s4</code>. The standbys whose names appear earlier in the list are given higher priority and will be considered as synchronous. Other standby servers appearing later in this list represent potential synchronous standbys. If any of the current synchronous standbys disconnects for whatever reason, it will be replaced immediately with the next-highest-priority standby. The keyword <code class=\"literal\">FIRST</code> is optional.</p><p>The keyword <code class=\"literal\">ANY</code>, coupled with <span class=\"replaceable\">num_sync</span>, specifies a quorum-based synchronous replication and makes transaction commits wait until their WAL records are replicated to <span class=\"emphasis\">at least</span><span class=\"replaceable\">num_sync</span> listed standbys. For example, a setting of <code class=\"literal\">ANY 3 (s1, s2, s3, s4)</code> will cause each commit to proceed as soon as at least any three standbys of <code class=\"literal\">s1</code>, <code class=\"literal\">s2</code>, <code class=\"literal\">s3</code> and <code class=\"literal\">s4</code> reply.</p><p><code class=\"literal\">FIRST</code> and <code class=\"literal\">ANY</code> are case-insensitive. If these keywords are used as the name of a standby server, its <span class=\"replaceable\">standby_name</span> must be double-quoted.</p><p>The third syntax was used before <span class=\"productname\">PostgreSQL</span> version 9.6 and is still supported. It's the same as the first syntax with <code class=\"literal\">FIRST</code> and <span class=\"replaceable\">num_sync</span> equal to 1. For example, <code class=\"literal\">FIRST 1 (s1, s2)</code> and <code class=\"literal\">s1, s2</code> have the same meaning: either <code class=\"literal\">s1</code> or <code class=\"literal\">s2</code> is chosen as a synchronous standby.</p><p>The special entry <code class=\"literal\">*</code> matches any standby name.</p><p>There is no mechanism to enforce uniqueness of standby names. In case of duplicates one of the matching standbys will be considered as higher priority, though exactly which one is indeterminate.</p><span class=\"note\"><p>Each <span class=\"replaceable\">standby_name</span> should have the form of a valid SQL identifier, unless it is <code class=\"literal\">*</code>. You can use double-quoting if necessary. But note that <span class=\"replaceable\">standby_name</span>s are compared to standby application names case-insensitively, whether double-quoted or not.</p></span><p>If no synchronous standby names are specified here, then synchronous replication is not enabled and transaction commits will not wait for replication. This is the default configuration. Even when synchronous replication is enabled, individual transactions can be configured not to wait for replication by setting the <code class=\"varname\">synchronous_commit</code> parameter to <code class=\"literal\">local</code> or <code class=\"literal\">off</code>.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    context: sighup

syslog_facility:
    type: enum
    short: "Sets the syslog \"facility\" to be used when syslog enabled."
    description: "<p>When logging to <span class=\"application\">syslog</span> is enabled, this parameter determines the <span class=\"application\">syslog</span><span class=\"quote\">facility</span> to be used. You can choose from <code class=\"literal\">LOCAL0</code>, <code class=\"literal\">LOCAL1</code>, <code class=\"literal\">LOCAL2</code>, <code class=\"literal\">LOCAL3</code>, <code class=\"literal\">LOCAL4</code>, <code class=\"literal\">LOCAL5</code>, <code class=\"literal\">LOCAL6</code>, <code class=\"literal\">LOCAL7</code>; the default is <code class=\"literal\">LOCAL0</code>. See also the documentation of your system's <span class=\"application\">syslog</span> daemon. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: local0
    showDefault: local0
    context: sighup
    values: "[local0, local1, local2, local3, local4, local5, local6, local7]"

syslog_ident:
    type: string
    short: "Sets the program name used to identify PostgreSQL messages in syslog."
    description: "<p>When logging to <span class=\"application\">syslog</span> is enabled, this parameter determines the program name used to identify <span class=\"productname\">PostgreSQL</span> messages in <span class=\"application\">syslog</span> logs. The default is <code class=\"literal\">postgres</code>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: postgres
    showDefault: postgres
    context: sighup

syslog_sequence_numbers:
    type: bool
    short: "Add sequence number to syslog messages to avoid duplicate suppression."
    description: "<p>When logging to <span class=\"application\">syslog</span> and this is on (the default), then each message will be prefixed by an increasing sequence number (such as <code class=\"literal\">[2]</code>). This circumvents the <span class=\"quote\">--- last message repeated N times ---</span> suppression that many syslog implementations perform by default. In more modern syslog implementations, repeated message suppression can be configured (for example, <code class=\"literal\">$RepeatedMsgReduction</code> in <span class=\"productname\">rsyslog</span>), so this might not be necessary. Also, you could turn this off if you actually want to suppress repeated messages.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: on
    showDefault: "on"
    context: sighup

syslog_split_messages:
    type: bool
    short: "Split messages sent to syslog by lines and to fit into 1024 bytes."
    description: "<p>When logging to <span class=\"application\">syslog</span> is enabled, this parameter determines how messages are delivered to syslog. When on (the default), messages are split by lines, and long lines are split so that they will fit into 1024 bytes, which is a typical size limit for traditional syslog implementations. When off, PostgreSQL server log messages are delivered to the syslog service as is, and it is up to the syslog service to cope with the potentially bulky messages.</p><p>If syslog is ultimately logging to a text file, then the effect will be the same either way, and it is best to leave the setting on, since most syslog implementations either cannot handle large messages or would need to be specially configured to handle them. But if syslog is ultimately writing into some other medium, it might be necessary or more useful to keep messages logically together.</p><p>This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: on
    showDefault: "on"
    context: sighup

tcp_keepalives_count:
    type: integer
    short: "Maximum number of TCP keepalive retransmits."
    description: "<p>Specifies the number of TCP keepalive messages that can be lost before the server's connection to the client is considered dead. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that support <code class=\"symbol\">TCP_KEEPCNT</code> or an equivalent socket option; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.</p><span class=\"note\"><p>This parameter is not supported on Windows, and must be zero.</p></span>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: 0
    context: user

tcp_keepalives_idle:
    type: integer
    subtype: time
    short: "Time between issuing TCP keepalives."
    description: "<p>Specifies the amount of time with no network activity after which the operating system should send a TCP keepalive message to the client. If this value is specified without units, it is taken as seconds. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that support <code class=\"symbol\">TCP_KEEPIDLE</code> or an equivalent socket option, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.</p><span class=\"note\"><p>On Windows, setting a value of 0 will set this parameter to 2 hours, since Windows does not provide a way to read the system default value.</p></span>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 s"
    context: user
    unit: s

tcp_keepalives_interval:
    type: integer
    subtype: time
    short: "Time between TCP keepalive retransmits."
    description: "<p>Specifies the amount of time after which a TCP keepalive message that has not been acknowledged by the client should be retransmitted. If this value is specified without units, it is taken as seconds. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that support <code class=\"symbol\">TCP_KEEPINTVL</code> or an equivalent socket option, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.</p><span class=\"note\"><p>On Windows, setting a value of 0 will set this parameter to 1 second, since Windows does not provide a way to read the system default value.</p></span>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 s"
    context: user
    unit: s

tcp_user_timeout:
    type: integer
    subtype: time
    short: "TCP user timeout."
    description: "<p>Specifies the amount of time that transmitted data may remain unacknowledged before the TCP connection is forcibly closed. If this value is specified without units, it is taken as milliseconds. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that support <code class=\"symbol\">TCP_USER_TIMEOUT</code>; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.</p><span class=\"note\"><p>This parameter is not supported on Windows, and must be zero.</p></span>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 ms"
    context: user
    unit: ms

temp_buffers:
    type: integer
    subtype: memory
    short: "Sets the maximum number of temporary buffers used by each session."
    description: "<p>Sets the maximum amount of memory used for temporary buffers within each database session. These are session-local buffers used only for access to temporary tables. If this value is specified without units, it is taken as blocks, that is <code class=\"symbol\">BLCKSZ</code> bytes, typically 8kB. The default is eight megabytes (<code class=\"literal\">8MB</code>). (If <code class=\"symbol\">BLCKSZ</code> is not 8kB, the default value scales proportionally to it.) This setting can be changed within individual sessions, but only before the first use of temporary tables within the session; subsequent attempts to change the value will have no effect on that session.</p><p>A session will allocate temporary buffers as needed up to the limit given by <code class=\"varname\">temp_buffers</code>. The cost of setting a large value in sessions that do not actually need many temporary buffers is only a buffer descriptor, or about 64 bytes, per increment in <code class=\"varname\">temp_buffers</code>. However if a buffer is actually used an additional 8192 bytes will be consumed for it (or in general, <code class=\"symbol\">BLCKSZ</code> bytes).</p>"
    min: "100 (800kB)"
    max: "1073741823 (8589934584kB)"
    default: 1024
    showDefault: "1024 (8MB)"
    context: user
    unit: 8kB

temp_file_limit:
    type: integer
    subtype: memory
    short: "Limits the total size of all temporary files used by each process."
    description: "<p>Specifies the maximum amount of disk space that a process can use for temporary files, such as sort and hash temporary files, or the storage file for a held cursor. A transaction attempting to exceed this limit will be canceled. If this value is specified without units, it is taken as kilobytes. <code class=\"literal\">-1</code> (the default) means no limit. Only superusers can change this setting.</p><p>This setting constrains the total space used at any instant by all temporary files used by a given <span class=\"productname\">PostgreSQL</span> process. It should be noted that disk space used for explicit temporary tables, as opposed to temporary files used behind-the-scenes in query execution, does <span class=\"emphasis\">not</span> count against this limit.</p>"
    min: "-1"
    max: "2147483647 (2147483647kB)"
    default: "-1"
    showDefault: "-1"
    context: superuser
    unit: kB

temp_tablespaces:
    type: string
    short: "Sets the tablespace(s) to use for temporary tables and sort files."
    description: "<p>This variable specifies tablespaces in which to create temporary objects (temp tables and indexes on temp tables) when a <span class=\"command\">CREATE</span> command does not explicitly specify a tablespace. Temporary files for purposes such as sorting large data sets are also created in these tablespaces.</p><p>The value is a list of names of tablespaces. When there is more than one name in the list, <span class=\"productname\">PostgreSQL</span> chooses a random member of the list each time a temporary object is to be created; except that within a transaction, successively created temporary objects are placed in successive tablespaces from the list. If the selected element of the list is an empty string, <span class=\"productname\">PostgreSQL</span> will automatically use the default tablespace of the current database instead.</p><p>When <code class=\"varname\">temp_tablespaces</code> is set interactively, specifying a nonexistent tablespace is an error, as is specifying a tablespace for which the user does not have <code class=\"literal\">CREATE</code> privilege. However, when using a previously set value, nonexistent tablespaces are ignored, as are tablespaces for which the user lacks <code class=\"literal\">CREATE</code> privilege. In particular, this rule applies when using a value set in <span class=\"filename\">postgresql.conf</span>.</p><p>The default value is an empty string, which results in all temporary objects being created in the default tablespace of the current database.</p><p>See also <code class=\"varname\">default_tablespace</code>.</p>"
    context:
     user
TimeZone:
    type: string
    short: "Sets the time zone for displaying and interpreting time stamps."
    description: "<p>Sets the time zone for displaying and interpreting time stamps. The built-in default is <code class=\"literal\">GMT</code>, but that is typically overridden in <span class=\"filename\">postgresql.conf</span>; <span class=\"application\">initdb</span> will install a setting there corresponding to its system environment. See <span class=\"xref\">datatype-timezones</span> for more information.</p>"
    default: GMT
    showDefault: GMT
    context: user

timezone_abbreviations:
    type: string
    short: "Selects a file of time zone abbreviations."
    description: "<p>Sets the collection of time zone abbreviations that will be accepted by the server for datetime input. The default is <code class=\"literal\">'Default'</code>, which is a collection that works in most of the world; there are also <code class=\"literal\">'Australia'</code> and <code class=\"literal\">'India'</code>, and other collections can be defined for a particular installation. See <span class=\"xref\">datetime-config-files</span> for more information.</p>"
    context: user

trace_notify:
    type: bool
    short: "Generates debugging output for LISTEN and NOTIFY."
    description: "<p>Generates a great amount of debugging output for the <span class=\"command\">LISTEN</span> and <span class=\"command\">NOTIFY</span> commands. <code class=\"varname\">client_min_messages</code> or <code class=\"varname\">log_min_messages</code> must be <code class=\"literal\">DEBUG1</code> or lower to send this output to the client or server logs, respectively.</p>"
    default: "off"
    showDefault: "off"
    context: user

trace_recovery_messages:
    type: enum
    short: "Enables logging of recovery-related debugging information."
    description: "<p>Enables logging of recovery-related debugging output that otherwise would not be logged. This parameter allows the user to override the normal setting of <code class=\"varname\">log_min_messages</code>, but only for specific messages. This is intended for use in debugging Hot Standby. Valid values are <code class=\"literal\">DEBUG5</code>, <code class=\"literal\">DEBUG4</code>, <code class=\"literal\">DEBUG3</code>, <code class=\"literal\">DEBUG2</code>, <code class=\"literal\">DEBUG1</code>, and <code class=\"literal\">LOG</code>. The default, <code class=\"literal\">LOG</code>, does not affect logging decisions at all. The other values cause recovery-related debug messages of that priority or higher to be logged as though they had <code class=\"literal\">LOG</code> priority; for common settings of <code class=\"varname\">log_min_messages</code> this results in unconditionally sending them to the server log. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: log
    showDefault: log
    context: sighup
    values: "[debug5, debug4, debug3, debug2, debug1, log, notice, warning, error]"

trace_sort:
    type: bool
    short: "Emit information about resource usage in sorting."
    description: "<p>If on, emit information about resource usage during sort operations. This parameter is only available if the <code class=\"symbol\">TRACE_SORT</code> macro was defined when <span class=\"productname\">PostgreSQL</span> was compiled. (However, <code class=\"symbol\">TRACE_SORT</code> is currently defined by default.)</p>"
    default: "off"
    showDefault: "off"
    context: user

track_activities:
    type: bool
    short: "Collects information about executing commands."
    description: "<p>Enables the collection of information on the currently executing command of each session, along with the time when that command began execution. This parameter is on by default. Note that even when enabled, this information is not visible to all users, only to superusers and the user owning the session being reported on, so it should not represent a security risk. Only superusers can change this setting.</p>"
    default: on
    showDefault: "on"
    context: superuser

track_activity_query_size:
    type: integer
    subtype: memory
    short: "Sets the size reserved for pg_stat_activity.query, in bytes."
    description: "<p>Specifies the amount of memory reserved to store the text of the currently executing command for each active session, for the <span class=\"structname\">pg_stat_activity</span>.<span class=\"structfield\">query</span> field. If this value is specified without units, it is taken as bytes. The default value is 1024 bytes. This parameter can only be set at server start.</p>"
    min: 100
    max: 1048576
    default: 1024
    showDefault: "1 kB"
    context: postmaster
    unit: B
    restart: "Gerektirir"

track_commit_timestamp:
    type: bool
    short: "Collects transaction commit time."
    description: "<p>Record commit time of transactions. This parameter can only be set in <span class=\"filename\">postgresql.conf</span> file or on the server command line. The default value is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

track_counts:
    type: bool
    short: "Collects statistics on database activity."
    description: "<p>Enables collection of statistics on database activity. This parameter is on by default, because the autovacuum daemon needs the collected information. Only superusers can change this setting.</p>"
    default: on
    showDefault: "on"
    context: superuser

track_functions:
    type: enum
    short: "Collects function-level statistics on database activity."
    description: "<p>Enables tracking of function call counts and time used. Specify <code class=\"literal\">pl</code> to track only procedural-language functions, <code class=\"literal\">all</code> to also track SQL and C language functions. The default is <code class=\"literal\">none</code>, which disables function statistics tracking. Only superusers can change this setting.</p><span class=\"note\"><p>SQL-language functions that are simple enough to be <span class=\"quote\">inlined</span> into the calling query will not be tracked, regardless of this setting.</p></span>"
    default: none
    showDefault: none
    context: superuser
    values: "[none, pl, all]"

track_io_timing:
    type: bool
    short: "Collects timing statistics for database I/O activity."
    description: "<p>Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. You can use the <span class=\"xref\">pgtesttiming</span> tool to measure the overhead of timing on your system. I/O timing information is displayed in <span class=\"link\"><span class=\"structname\">pg_stat_database</span></span>, in the output of <span class=\"xref\">sql-explain</span> when the <code class=\"literal\">BUFFERS</code> option is used, and by <span class=\"xref\">pgstatstatements</span>. Only superusers can change this setting.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

vacuum_cost_delay:
    type: real
    subtype: time
    short: "Vacuum cost delay in milliseconds."
    description: "<p>The amount of time that the process will sleep when the cost limit has been exceeded. If this value is specified without units, it is taken as milliseconds. The default value is zero, which disables the cost-based vacuum delay feature. Positive values enable cost-based vacuuming.</p><p>When using cost-based vacuuming, appropriate values for <code class=\"varname\">vacuum_cost_delay</code> are usually quite small, perhaps less than 1 millisecond. While <code class=\"varname\">vacuum_cost_delay</code> can be set to fractional-millisecond values, such delays may not be measured accurately on older platforms. On such platforms, increasing <span class=\"command\">VACUUM</span>'s throttled resource consumption above what you get at 1ms will require changing the other vacuum cost parameters. You should, nonetheless, keep <code class=\"varname\">vacuum_cost_delay</code> as small as your platform will consistently measure; large delays are not helpful.</p>"
    min: "0 (0ms)"
    max: "100 (100ms)"
    default: 0
    showDefault: "0 (0ms)"
    context: user
    unit: "milliseconds (ms)"

vacuum_cost_limit:
    type: integer
    short: "Vacuum cost amount available before napping."
    description: "<p>The accumulated cost that will cause the vacuuming process to sleep. The default value is 200.</p>"
    min: 1
    max: 10000
    default: 200
    showDefault: 200
    context: user

transform_null_equals:
    type: bool
    short: "Treats \"expr=NULL\" as \"expr IS NULL\"."
    description: "<p>When on, expressions of the form <code class=\"literal\"><span class=\"replaceable\">expr</span> = NULL</code> (or <code class=\"literal\">NULL = <span class=\"replaceable\">expr</span></code>) are treated as <code class=\"literal\"><span class=\"replaceable\">expr</span> IS NULL</code>, that is, they return true if <span class=\"replaceable\">expr</span> evaluates to the null value, and false otherwise. The correct SQL-spec-compliant behavior of <code class=\"literal\"><span class=\"replaceable\">expr</span> = NULL</code> is to always return null (unknown). Therefore this parameter defaults to <code class=\"literal\">off</code>.</p><p>However, filtered forms in <span class=\"productname\">Microsoft Access</span> generate queries that appear to use <code class=\"literal\"><span class=\"replaceable\">expr</span> = NULL</code> to test for null values, so if you use that interface to access the database you might want to turn this option on. Since expressions of the form <code class=\"literal\"><span class=\"replaceable\">expr</span> = NULL</code> always return the null value (using the SQL standard interpretation), they are not very useful and do not appear often in normal applications so this option does little harm in practice. But new users are frequently confused about the semantics of expressions involving null values, so this option is off by default.</p><p>Note that this option only affects the exact form <code class=\"literal\">= NULL</code>, not other comparison operators or other expressions that are computationally equivalent to some expression involving the equals operator (such as <code class=\"literal\">IN</code>). Thus, this option is not a general fix for bad programming.</p><p>Refer to <span class=\"xref\">functions-comparison</span> for related information.</p>"
    default: "off"
    showDefault: "off"
    context: user

unix_socket_directories:
    type: string
    short: "Sets the directories where Unix-domain sockets will be created."
    description: "<p>Specifies the directory of the Unix-domain socket(s) on which the server is to listen for connections from client applications. Multiple sockets can be created by listing multiple directories separated by commas. Whitespace between entries is ignored; surround a directory name with double quotes if you need to include whitespace or commas in the name. An empty value specifies not listening on any Unix-domain sockets, in which case only TCP/IP sockets can be used to connect to the server. The default value is normally <span class=\"filename\">/tmp</span>, but that can be changed at build time. On Windows, the default is empty, which means no Unix-domain socket is created by default. This parameter can only be set at server start.</p><p>In addition to the socket file itself, which is named <code class=\"literal\">.s.PGSQL.<span class=\"replaceable\">nnnn</span></code> where <span class=\"replaceable\">nnnn</span> is the server's port number, an ordinary file named <code class=\"literal\">.s.PGSQL.<span class=\"replaceable\">nnnn</span>.lock</code> will be created in each of the <code class=\"varname\">unix_socket_directories</code> directories. Neither file should ever be removed manually.</p>"
    default: "/var/run/postgresql"
    showDefault: "/var/run/postgresql"
    context: postmaster
    restart: "Gerektirir"

unix_socket_group:
    type: string
    short: "Sets the owning group of the Unix-domain socket."
    description: "<p>Sets the owning group of the Unix-domain socket(s). (The owning user of the sockets is always the user that starts the server.) In combination with the parameter <code class=\"varname\">unix_socket_permissions</code> this can be used as an additional access control mechanism for Unix-domain connections. By default this is the empty string, which uses the default group of the server user. This parameter can only be set at server start.</p><p>This parameter is not supported on Windows. Any setting will be ignored.</p>"
    context: postmaster
    restart: "Gerektirir"

unix_socket_permissions:
    type: integer
    short: "Sets the access permissions of the Unix-domain socket."
    description: "<p>Sets the access permissions of the Unix-domain socket(s). Unix-domain sockets use the usual Unix file system permission set. The parameter value is expected to be a numeric mode specified in the format accepted by the <span class=\"function\">chmod</span> and <span class=\"function\">umask</span> system calls. (To use the customary octal format the number must start with a <code class=\"literal\">0</code> (zero).)</p><p>The default permissions are <code class=\"literal\">0777</code>, meaning anyone can connect. Reasonable alternatives are <code class=\"literal\">0770</code> (only user and group, see also <code class=\"varname\">unix_socket_group</code>) and <code class=\"literal\">0700</code> (only user). (Note that for a Unix-domain socket, only write permission matters, so there is no point in setting or revoking read or execute permissions.)</p><p>This access control mechanism is independent of the one described in <span class=\"xref\">client-authentication</span>.</p><p>This parameter can only be set at server start.</p><p>This parameter is irrelevant on systems, notably Solaris as of Solaris 10, that ignore socket permissions entirely. There, one can achieve a similar effect by pointing <code class=\"varname\">unix_socket_directories</code> to a directory having search permission limited to the desired audience.</p>"
    min: 0
    max: 511
    default: 511
    showDefault: 777
    context: postmaster
    restart: "Gerektirir"
    octalFormat: true

update_process_title:
    type: bool
    short: "Updates the process title to show the active SQL command."
    description: "<p>Enables updating of the process title every time a new SQL command is received by the server. This setting defaults to <code class=\"literal\">on</code> on most platforms, but it defaults to <code class=\"literal\">off</code> on Windows due to that platform's larger overhead for updating the process title. Only superusers can change this setting.</p>"
    default: on
    showDefault: "on"
    context: superuser

vacuum_cleanup_index_scale_factor:
    type: real
    short: "Number of tuple inserts prior to index cleanup as a fraction of reltuples."
    description: "<p>Specifies the fraction of the total number of heap tuples counted in the previous statistics collection that can be inserted without incurring an index scan at the <span class=\"command\">VACUUM</span> cleanup stage. This setting currently applies to B-tree indexes only.</p><p>If no tuples were deleted from the heap, B-tree indexes are still scanned at the <span class=\"command\">VACUUM</span> cleanup stage when at least one of the following conditions is met: the index statistics are stale, or the index contains deleted pages that can be recycled during cleanup. Index statistics are considered to be stale if the number of newly inserted tuples exceeds the <code class=\"varname\">vacuum_cleanup_index_scale_factor</code> fraction of the total number of heap tuples detected by the previous statistics collection. The total number of heap tuples is stored in the index meta-page. Note that the meta-page does not include this data until <span class=\"command\">VACUUM</span> finds no dead tuples, so B-tree index scan at the cleanup stage can only be skipped if the second and subsequent <span class=\"command\">VACUUM</span> cycles detect no dead tuples.</p><p>The value can range from <code class=\"literal\">0</code> to <code class=\"literal\">10000000000</code>. When <code class=\"varname\">vacuum_cleanup_index_scale_factor</code> is set to <code class=\"literal\">0</code>, index scans are never skipped during <span class=\"command\">VACUUM</span> cleanup. The default value is <code class=\"literal\">0.1</code>.</p>"
    min: 0
    max: "1e+10"
    default: "0.1"
    showDefault: "0.1"
    context: user

vacuum_cost_page_miss:
    type: integer
    short: "Vacuum cost for a page not found in the buffer cache."
    description: "<p>The estimated cost for vacuuming a buffer that has to be read from disk. This represents the effort to lock the buffer pool, lookup the shared hash table, read the desired block in from the disk and scan its content. The default value is 10.</p>"
    min: 0
    max: 10000
    default: 10
    showDefault: 10
    context: user

vacuum_defer_cleanup_age:
    type: integer
    short: "Number of transactions by which VACUUM and HOT cleanup should be deferred, if any."
    description: "<p>Specifies the number of transactions by which <span class=\"command\">VACUUM</span> and <span class=\"acronym\">HOT</span> updates will defer cleanup of dead row versions. The default is zero transactions, meaning that dead row versions can be removed as soon as possible, that is, as soon as they are no longer visible to any open transaction. You may wish to set this to a non-zero value on a primary server that is supporting hot standby servers, as described in <span class=\"xref\">hot-standby</span>. This allows more time for queries on the standby to complete without incurring conflicts due to early cleanup of rows. However, since the value is measured in terms of number of write transactions occurring on the primary server, it is difficult to predict just how much additional grace time will be made available to standby queries. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>You should also consider setting <code class=\"varname\">hot_standby_feedback</code> on standby server(s) as an alternative to using this parameter.</p><p>This does not prevent cleanup of dead rows which have reached the age specified by <code class=\"varname\">old_snapshot_threshold</code>.</p>"
    min: 0
    max: 1000000
    default: 0
    showDefault: 0
    context: sighup

vacuum_freeze_min_age:
    type: integer
    short: "Minimum age at which VACUUM should freeze a table row."
    description: "<p>Specifies the cutoff age (in transactions) that <span class=\"command\">VACUUM</span> should use to decide whether to freeze row versions while scanning a table. The default is 50 million transactions. Although users can set this value anywhere from zero to one billion, <span class=\"command\">VACUUM</span> will silently limit the effective value to half the value of <code class=\"varname\">autovacuum_freeze_max_age</code>, so that there is not an unreasonably short time between forced autovacuums. For more information see <span class=\"xref\">vacuum-for-wraparound</span>.</p>"
    min: 0
    max: 1000000000
    default: 50000000
    showDefault: 50000000
    context: user

vacuum_freeze_table_age:
    type: integer
    short: "Age at which VACUUM should scan whole table to freeze tuples."
    description: "<p><span class=\"command\">VACUUM</span> performs an aggressive scan if the table's <span class=\"structname\">pg_class</span>.<span class=\"structfield\">relfrozenxid</span> field has reached the age specified by this setting. An aggressive scan differs from a regular <span class=\"command\">VACUUM</span> in that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million transactions. Although users can set this value anywhere from zero to two billion, <span class=\"command\">VACUUM</span> will silently limit the effective value to 95% of <code class=\"varname\">autovacuum_freeze_max_age</code>, so that a periodic manual <span class=\"command\">VACUUM</span> has a chance to run before an anti-wraparound autovacuum is launched for the table. For more information see <span class=\"xref\">vacuum-for-wraparound</span>.</p>"
    min: 0
    max: 2000000000
    default: 150000000
    showDefault: 150000000
    context: user

vacuum_multixact_freeze_min_age:
    type: integer
    short: "Minimum age at which VACUUM should freeze a MultiXactId in a table row."
    description: "<p>Specifies the cutoff age (in multixacts) that <span class=\"command\">VACUUM</span> should use to decide whether to replace multixact IDs with a newer transaction ID or multixact ID while scanning a table. The default is 5 million multixacts. Although users can set this value anywhere from zero to one billion, <span class=\"command\">VACUUM</span> will silently limit the effective value to half the value of <code class=\"varname\">autovacuum_multixact_freeze_max_age</code>, so that there is not an unreasonably short time between forced autovacuums. For more information see <span class=\"xref\">vacuum-for-multixact-wraparound</span>.</p>"
    min: 0
    max: 1000000000
    default: 5000000
    showDefault: 5000000
    context: user

vacuum_multixact_freeze_table_age:
    type: integer
    short: "Multixact age at which VACUUM should scan whole table to freeze tuples."
    description: "<p><span class=\"command\">VACUUM</span> performs an aggressive scan if the table's <span class=\"structname\">pg_class</span>.<span class=\"structfield\">relminmxid</span> field has reached the age specified by this setting. An aggressive scan differs from a regular <span class=\"command\">VACUUM</span> in that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million multixacts. Although users can set this value anywhere from zero to two billion, <span class=\"command\">VACUUM</span> will silently limit the effective value to 95% of <code class=\"varname\">autovacuum_multixact_freeze_max_age</code>, so that a periodic manual <span class=\"command\">VACUUM</span> has a chance to run before an anti-wraparound is launched for the table. For more information see <span class=\"xref\">vacuum-for-multixact-wraparound</span>.</p>"
    min: 0
    max: 2000000000
    default: 150000000
    showDefault: 150000000
    context: user

wal_buffers:
    type: integer
    subtype: memory
    short: "Sets the number of disk-page buffers in shared memory for WAL."
    description: "<p>The amount of shared memory used for WAL data that has not yet been written to disk. The default setting of -1 selects a size equal to 1/32nd (about 3%) of <code class=\"varname\">shared_buffers</code>, but not less than <code class=\"literal\">64kB</code> nor more than the size of one WAL segment, typically <code class=\"literal\">16MB</code>. This value can be set manually if the automatic choice is too large or too small, but any positive value less than <code class=\"literal\">32kB</code> will be treated as <code class=\"literal\">32kB</code>. If this value is specified without units, it is taken as WAL blocks, that is <code class=\"symbol\">XLOG_BLCKSZ</code> bytes, typically 8kB. This parameter can only be set at server start.</p><p>The contents of the WAL buffers are written out to disk at every transaction commit, so extremely large values are unlikely to provide a significant benefit. However, setting this value to at least a few megabytes can improve write performance on a busy server where many clients are committing at once. The auto-tuning selected by the default setting of -1 should give reasonable results in most cases.</p>"
    min: "-1"
    max: 262143
    default: "-1"
    showDefault: "-1"
    context: postmaster
    unit: 8kB
    restart: "Gerektirir"

wal_compression:
    type: bool
    short: "Compresses full-page writes written in WAL file."
    description: "<p>When this parameter is <code class=\"literal\">on</code>, the <span class=\"productname\">PostgreSQL</span> server compresses a full page image written to WAL when <code class=\"varname\">full_page_writes</code> is on or during a base backup. A compressed page image will be decompressed during WAL replay. The default value is <code class=\"literal\">off</code>. Only superusers can change this setting.</p><p>Turning this parameter on can reduce the WAL volume without increasing the risk of unrecoverable data corruption, but at the cost of some extra CPU spent on the compression during WAL logging and on the decompression during WAL replay.</p>"
    default: "off"
    showDefault: "off"
    context: superuser

wal_consistency_checking:
    type: string
    short: "Sets the WAL resource managers for which WAL consistency checks are done."
    description: "<p>This parameter is intended to be used to check for bugs in the WAL redo routines. When enabled, full-page images of any buffers modified in conjunction with the WAL record are added to the record. If the record is subsequently replayed, the system will first apply each record and then test whether the buffers modified by the record match the stored images. In certain cases (such as hint bits), minor variations are acceptable, and will be ignored. Any unexpected differences will result in a fatal error, terminating recovery.</p><p>The default value of this setting is the empty string, which disables the feature. It can be set to <code class=\"literal\">all</code> to check all records, or to a comma-separated list of resource managers to check only records originating from those resource managers. Currently, the supported resource managers are <code class=\"literal\">heap</code>, <code class=\"literal\">heap2</code>, <code class=\"literal\">btree</code>, <code class=\"literal\">hash</code>, <code class=\"literal\">gin</code>, <code class=\"literal\">gist</code>, <code class=\"literal\">sequence</code>, <code class=\"literal\">spgist</code>, <code class=\"literal\">brin</code>, and <code class=\"literal\">generic</code>. Only superusers can change this setting.</p>"
    context: superuser
    
wal_init_zero:
    type: bool
    short: "Writes zeroes to new WAL files before first use."
    description: "<p>If set to <code class=\"literal\">on</code> (the default), this option causes new WAL files to be filled with zeroes. On some file systems, this ensures that space is allocated before we need to write WAL records. However, <span class=\"firstterm\">Copy-On-Write</span> (COW) file systems may not benefit from this technique, so the option is given to skip the unnecessary work. If set to <code class=\"literal\">off</code>, only the final byte is written when the file is created so that it has the expected size.</p>"
    default: on
    showDefault: "on"
    context: superuser

wal_keep_size:
    type: integer
    subtype: memory
    short: "Sets the size of WAL files held for standby servers."
    description: "<p>Specifies the minimum size of past log file segments kept in the <span class=\"filename\">pg_wal</span> directory, in case a standby server needs to fetch them for streaming replication. If a standby server connected to the sending server falls behind by more than <code class=\"varname\">wal_keep_size</code> megabytes, the sending server might remove a WAL segment still needed by the standby, in which case the replication connection will be terminated. Downstream connections will also eventually fail as a result. (However, the standby server can recover by fetching the segment from archive, if WAL archiving is in use.)</p><p>This sets only the minimum size of segments retained in <span class=\"filename\">pg_wal</span>; the system might need to retain more segments for WAL archival or to recover from a checkpoint. If <code class=\"varname\">wal_keep_size</code> is zero (the default), the system doesn't keep any extra segments for standby purposes, so the number of old WAL segments available to standby servers is a function of the location of the previous checkpoint and status of WAL archiving. If this value is specified without units, it is taken as megabytes. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 0
    showDefault: "0 MB"
    context: sighup
    unit: MB

wal_level:
    type: enum
    short: "Set the level of information written to the WAL."
    description: "<p><code class=\"varname\">wal_level</code> determines how much information is written to the WAL. The default value is <code class=\"literal\">replica</code>, which writes enough data to support WAL archiving and replication, including running read-only queries on a standby server. <code class=\"literal\">minimal</code> removes all logging except the information required to recover from a crash or immediate shutdown. Finally, <code class=\"literal\">logical</code> adds information necessary to support logical decoding. Each level includes the information logged at all lower levels. This parameter can only be set at server start.</p><p>In <code class=\"literal\">minimal</code> level, no information is logged for permanent relations for the remainder of a transaction that creates or rewrites them. This can make operations much faster (see <span class=\"xref\">populate-pitr</span>). Operations that initiate this optimization include: <ul class=\"simplelist\"><li class=\"member\"><span class=\"command\">ALTER ... SET TABLESPACE</span></li><li class=\"member\"><span class=\"command\">CLUSTER</span></li><li class=\"member\"><span class=\"command\">CREATE TABLE</span></li><li class=\"member\"><span class=\"command\">REFRESH MATERIALIZED VIEW</span> (without <span class=\"option\">CONCURRENTLY</span>)</li><li class=\"member\"><span class=\"command\">REINDEX</span></li><li class=\"member\"><span class=\"command\">TRUNCATE</span></li></ul> But minimal WAL does not contain enough information to reconstruct the data from a base backup and the WAL logs, so <code class=\"literal\">replica</code> or higher must be used to enable WAL archiving (<code class=\"varname\">archive_mode</code>) and streaming replication.</p><p>In <code class=\"literal\">logical</code> level, the same information is logged as with <code class=\"literal\">replica</code>, plus information needed to allow extracting logical change sets from the WAL. Using a level of <code class=\"literal\">logical</code> will increase the WAL volume, particularly if many tables are configured for <code class=\"literal\">REPLICA IDENTITY FULL</code> and many <span class=\"command\">UPDATE</span> and <span class=\"command\">DELETE</span> statements are executed.</p><p>In releases prior to 9.6, this parameter also allowed the values <code class=\"literal\">archive</code> and <code class=\"literal\">hot_standby</code>. These are still accepted but mapped to <code class=\"literal\">replica</code>.</p>"
    default: replica
    showDefault: replica
    context: postmaster
    restart: "Gerektirir"
    values: "[minimal, replica, logical]"

wal_log_hints:
    type: bool
    short: "Writes full pages to WAL when first modified after a checkpoint, even for a non-critical modifications."
    description: "<p>When this parameter is <code class=\"literal\">on</code>, the <span class=\"productname\">PostgreSQL</span> server writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint, even for non-critical modifications of so-called hint bits.</p><p>If data checksums are enabled, hint bit updates are always WAL-logged and this setting is ignored. You can use this setting to test how much extra WAL-logging would occur if your database had data checksums enabled.</p><p>This parameter can only be set at server start. The default value is <code class=\"literal\">off</code>.</p>"
    default: "off"
    showDefault: "off"
    context: postmaster
    restart: "Gerektirir"

wal_receiver_create_temp_slot:
    type: bool
    short: "Sets whether a WAL receiver should create a temporary replication slot if no permanent slot is configured."
    description: "<p>Specifies whether the WAL receiver process should create a temporary replication slot on the remote instance when no permanent replication slot to use has been configured (using <code class=\"varname\">primary_slot_name</code>). The default is off. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting.</p>"
    default: "off"
    showDefault: "off"
    context: sighup

wal_receiver_status_interval:
    type: integer
    subtype: time
    short: "Sets the maximum interval between WAL receiver status reports to the sending server."
    description: "<p>Specifies the minimum frequency for the WAL receiver process on the standby to send information about replication progress to the primary or upstream standby, where it can be seen using the <span class=\"link\"><span class=\"structname\">pg_stat_replication</span></span> view. The standby will report the last write-ahead log location it has written, the last position it has flushed to disk, and the last position it has applied. This parameter's value is the maximum amount of time between reports. Updates are sent each time the write or flush positions change, or at least as often as specified by this parameter. Thus, the apply position may lag slightly behind the true position. If this value is specified without units, it is taken as seconds. The default value is 10 seconds. Setting this parameter to zero disables status updates completely. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483
    default: 10
    showDefault: "10 s"
    context: sighup
    unit: s

wal_receiver_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum wait time to receive data from the sending server."
    description: "<p>Terminate replication connections that are inactive for longer than this amount of time. This is useful for the receiving standby server to detect a primary node crash or network outage. If this value is specified without units, it is taken as milliseconds. The default value is 60 seconds. A value of zero disables the timeout mechanism. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 60000
    showDefault: "1 min"
    context: sighup
    unit: ms

wal_recycle:
    type: bool
    short: "Recycles WAL files by renaming them."
    description: "<p>If set to <code class=\"literal\">on</code> (the default), this option causes WAL files to be recycled by renaming them, avoiding the need to create new ones. On COW file systems, it may be faster to create new ones, so the option is given to disable this behavior.</p>"
    default: on
    showDefault: "on"
    context: superuser

wal_retrieve_retry_interval:
    type: integer
    subtype: time
    short: "Sets the time to wait before retrying to retrieve WAL after a failed attempt."
    description: "<p>Specifies how long the standby server should wait when WAL data is not available from any sources (streaming replication, local <span class=\"filename\">pg_wal</span> or WAL archive) before trying again to retrieve WAL data. If this value is specified without units, it is taken as milliseconds. The default value is 5 seconds. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p><p>This parameter is useful in configurations where a node in recovery needs to control the amount of time to wait for new WAL data to be available. For example, in archive recovery, it is possible to make the recovery more responsive in the detection of a new WAL log file by reducing the value of this parameter. On a system with low WAL activity, increasing it reduces the amount of requests necessary to access WAL archives, something useful for example in cloud environments where the amount of times an infrastructure is accessed is taken into account.</p>"
    min: 1
    max: 2147483647
    default: 5000
    showDefault: "5 s"
    context: sighup
    unit: ms

wal_sender_timeout:
    type: integer
    subtype: time
    short: "Sets the maximum time to wait for WAL replication."
    description: "<p>Terminate replication connections that are inactive for longer than this amount of time. This is useful for the sending server to detect a standby crash or network outage. If this value is specified without units, it is taken as milliseconds. The default value is 60 seconds. A value of zero disables the timeout mechanism.</p><p>With a cluster distributed across multiple geographic locations, using different values per location brings more flexibility in the cluster management. A smaller value is useful for faster failure detection with a standby having a low-latency network connection, and a larger value helps in judging better the health of a standby if located on a remote location, with a high-latency network connection.</p>"
    min: 0
    max: 2147483647
    default: 60000
    showDefault: "1 min"
    context: user
    unit: ms

wal_skip_threshold:
    type: integer
    subtype: memory
    short: "Size of new file to fsync instead of writing WAL."
    description: "<p>When <code class=\"varname\">wal_level</code> is <code class=\"literal\">minimal</code> and a transaction commits after creating or rewriting a permanent relation, this setting determines how to persist the new data. If the data is smaller than this setting, write it to the WAL log; otherwise, use an fsync of affected files. Depending on the properties of your storage, raising or lowering this value might help if such commits are slowing concurrent transactions. If this value is specified without units, it is taken as kilobytes. The default is two megabytes (<code class=\"literal\">2MB</code>).</p>"
    min: 0
    max: 2147483647
    default: 2048
    showDefault: "2 MB"
    context: user
    unit: kB

wal_sync_method:
    type: enum
    short: "Selects the method used for forcing WAL updates to disk."
    description: "<p>Method used for forcing WAL updates out to disk. If <code class=\"varname\">fsync</code> is off then this setting is irrelevant, since WAL file updates will not be forced out at all. Possible values are:</p><ul class=\"itemizedlist\"><li class=\"listitem\"><p><code class=\"literal\">open_datasync</code> (write WAL files with <span class=\"function\">open()</span> option <code class=\"symbol\">O_DSYNC</code>)</p></li><li class=\"listitem\"><p><code class=\"literal\">fdatasync</code> (call <span class=\"function\">fdatasync()</span> at each commit)</p></li><li class=\"listitem\"><p><code class=\"literal\">fsync</code> (call <span class=\"function\">fsync()</span> at each commit)</p></li><li class=\"listitem\"><p><code class=\"literal\">fsync_writethrough</code> (call <span class=\"function\">fsync()</span> at each commit, forcing write-through of any disk write cache)</p></li><li class=\"listitem\"><p><code class=\"literal\">open_sync</code> (write WAL files with <span class=\"function\">open()</span> option <code class=\"symbol\">O_SYNC</code>)</p></li></ul><p>The <code class=\"literal\">open_</code>* options also use <code class=\"literal\">O_DIRECT</code> if available. Not all of these choices are available on all platforms. The default is the first method in the above list that is supported by the platform, except that <code class=\"literal\">fdatasync</code> is the default on Linux. The default is not necessarily ideal; it might be necessary to change this setting or other aspects of your system configuration in order to create a crash-safe configuration or achieve optimal performance. These aspects are discussed in <span class=\"xref\">wal-reliability</span>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    default: fdatasync
    showDefault: fdatasync
    context: sighup
    values: "[fsync, fdatasync, open_sync, open_datasync]"

wal_writer_delay:
    type: integer
    subtype: time
    short: "Time between WAL flushes performed in the WAL writer."
    description: "<p>Specifies how often the WAL writer flushes WAL, in time terms. After flushing WAL the writer sleeps for the length of time given by <code class=\"varname\">wal_writer_delay</code>, unless woken up sooner by an asynchronously committing transaction. If the last flush happened less than <code class=\"varname\">wal_writer_delay</code> ago and less than <code class=\"varname\">wal_writer_flush_after</code> worth of WAL has been produced since, then WAL is only written to the operating system, not flushed to disk. If this value is specified without units, it is taken as milliseconds. The default value is 200 milliseconds (<code class=\"literal\">200ms</code>). Note that on many systems, the effective resolution of sleep delays is 10 milliseconds; setting <code class=\"varname\">wal_writer_delay</code> to a value that is not a multiple of 10 might have the same results as setting it to the next higher multiple of 10. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 1
    max: 10000
    default: 200
    showDefault: "200 ms"
    context: sighup
    unit: ms

wal_writer_flush_after:
    type: integer
    subtype: memory
    short: "Amount of WAL written out by WAL writer that triggers a flush."
    description: "<p>Specifies how often the WAL writer flushes WAL, in volume terms. If the last flush happened less than <code class=\"varname\">wal_writer_delay</code> ago and less than <code class=\"varname\">wal_writer_flush_after</code> worth of WAL has been produced since, then WAL is only written to the operating system, not flushed to disk. If <code class=\"varname\">wal_writer_flush_after</code> is set to <code class=\"literal\">0</code> then WAL data is always flushed immediately. If this value is specified without units, it is taken as WAL blocks, that is <code class=\"symbol\">XLOG_BLCKSZ</code> bytes, typically 8kB. The default is <code class=\"literal\">1MB</code>. This parameter can only be set in the <span class=\"filename\">postgresql.conf</span> file or on the server command line.</p>"
    min: 0
    max: 2147483647
    default: 128
    showDefault: "1 MB"
    context: sighup
    unit: 8kB

work_mem:
    type: integer
    subtype: memory
    short: "Sets the maximum memory to be used for query workspaces."
    description: "<p>Sets the base maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files. If this value is specified without units, it is taken as kilobytes. The default value is four megabytes (<code class=\"literal\">4MB</code>). Note that for a complex query, several sort or hash operations might be running in parallel; each operation will generally be allowed to use as much memory as this value specifies before it starts to write data into temporary files. Also, several running sessions could be doing such operations concurrently. Therefore, the total memory used could be many times the value of <code class=\"varname\">work_mem</code>; it is necessary to keep this fact in mind when choosing the value. Sort operations are used for <code class=\"literal\">ORDER BY</code>, <code class=\"literal\">DISTINCT</code>, and merge joins. Hash tables are used in hash joins, hash-based aggregation, and hash-based processing of <code class=\"literal\">IN</code> subqueries.</p><p>Hash-based operations are generally more sensitive to memory availability than equivalent sort-based operations. The memory available for hash tables is computed by multiplying <code class=\"varname\">work_mem</code> by <code class=\"varname\">hash_mem_multiplier</code>. This makes it possible for hash-based operations to use an amount of memory that exceeds the usual <code class=\"varname\">work_mem</code> base amount.</p>"
    min: "64 (64kB)"
    max: "2147483647 (2147483647kB)"
    default: 4096
    showDefault: "4096 (4MB)"
    context: user
    unit: kB

xmlbinary:
    type: enum
    short: "Sets how binary values are to be encoded in XML."
    description: "<p>Sets how binary values are to be encoded in XML. This applies for example when <span class=\"type\">bytea</span> values are converted to XML by the functions <span class=\"function\">xmlelement</span> or <span class=\"function\">xmlforest</span>. Possible values are <code class=\"literal\">base64</code> and <code class=\"literal\">hex</code>, which are both defined in the XML Schema standard. The default is <code class=\"literal\">base64</code>. For further information about XML-related functions, see <span class=\"xref\">functions-xml</span>.</p><p>The actual choice here is mostly a matter of taste, constrained only by possible restrictions in client applications. Both methods support all possible values, although the hex encoding will be somewhat larger than the base64 encoding.</p>"
    default: base64
    showDefault: base64
    context: user
    values: "[base64, hex]"

xmloption:
    type: enum
    short: "Sets whether XML data in implicit parsing and serialization operations is to be considered as documents or content fragments."
    description: "<p>Sets whether <code class=\"literal\">DOCUMENT</code> or <code class=\"literal\">CONTENT</code> is implicit when converting between XML and character string values. See <span class=\"xref\">datatype-xml</span> for a description of this. Valid values are <code class=\"literal\">DOCUMENT</code> and <code class=\"literal\">CONTENT</code>. The default is <code class=\"literal\">CONTENT</code>.</p><p>According to the SQL standard, the command to set this option is<span class=\"synopsis\">SET XML OPTION { DOCUMENT | CONTENT };</span> This syntax is also available in PostgreSQL.</p>"
    default: content
    showDefault: content
    context: user
    values: "[content, document]"

zero_damaged_pages:
    type: bool
    short: "Continues processing past damaged page headers."
    description: "<p>Detection of a damaged page header normally causes <span class=\"productname\">PostgreSQL</span> to report an error, aborting the current transaction. Setting <code class=\"varname\">zero_damaged_pages</code> to on causes the system to instead report a warning, zero out the damaged page in memory, and continue processing. This behavior <span class=\"emphasis\">will destroy data</span>, namely all the rows on the damaged page. However, it does allow you to get past the error and retrieve rows from any undamaged pages that might be present in the table. It is useful for recovering data if corruption has occurred due to a hardware or software error. You should generally not set this on until you have given up hope of recovering data from the damaged pages of a table. Zeroed-out pages are not forced to disk so it is recommended to recreate the table or the index before turning this parameter off again. The default setting is <code class=\"literal\">off</code>, and it can only be changed by a superuser.</p>"
    default: "off"
    showDefault: "off"
    context: superuser